<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>3RDEYESYSTEM Technical Documentations</title>
        <description>써드아이시스템(3rdeyesys) 기술문서 사이트입니다 - Ncloud 프리미엄 파트너</description>
        <link>https://docs.3rdeyesys.com/</link>
        <atom:link href="https://docs.3rdeyesys.com/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 04 Aug 2022 11:02:31 +0900</pubDate>
        <lastBuildDate>Thu, 04 Aug 2022 11:02:31 +0900</lastBuildDate>
        <generator>Jekyll v4.2.2</generator>
        
        
        <item>
            <title>Proxy Protocol을 이용해 Client IP 확인하기 | Ubuntu</title>
            <description>## 개요
Ncloud Load Balancer는 HTTP, HTTPS, TCP, SSL 이렇게 4가지의 프로토콜을 지원합니다.  
그런데, Load Balancer를 사용하면서 Client IP를 확인하려고 할 때 http, https 통신의 경우 X-Forwarded-For 헤더값이 지원되기에 Client IP를 확인할 수 있지만, 
TCP 통신의 경우 X-Forwarded-For 헤더를 사용할 수 없기에 Client IP를 확인하기 위해서는 Proxy Protocol 옵션을 활성화 시켜야 합니다.

여기서는 **Ncloud Network Proxy Load Balancer**의 TCP 프로토콜을 사용하면서 `Proxy Protocol 옵션을 활성화`시켜 **Ubuntu 서버에서 Client IP를 기록**하는 방법을 소개하겠습니다.

## 테스트 환경
- VPC 환경
- Ubuntu 18.04
- Apache 2.4.6
- Network Proxy Load Balancer
- Protocol/Port: TCP/80


## Ubuntu 서버 설치
서버를 생성하고 Apache 웹서버와 개발용 추가 모듈이 포함된 **apache2-dev 패키지**를 설치하고 간단한 웹페이지를 만들어 접속해 보았습니다.  

- VPC 환경에서 서버 생성하는 방법 : &lt;a href=&quot;/compute/ncloud_compute_server_vpc_create.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_server_vpc_create.html&lt;/a&gt;

``` bash
~# apt update
~# apt -y install apache2 apache2-dev
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## Target Group 설정 
우선 Load Balancer를 생성하기 전에 Load Balancer에서 사용할 Target Group을 [Load Balancer] - [Target Group]에서 생성합니다.

### Target Group 생성
Target Group의 이름를 입력하고 Target 유형은 [VPC Server]를 선택, 다음으로 VPC 대역을 선택합니다.  
그리고, `프로토콜은 PROXY_TCP를 선택`하고, 포트는 80포트를 사용하겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Health Check 설정
Health Check 할 프로토콜은 TCP를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target 추가
앞에서 생성했던 서버 2대를 선택하고 [적용 Target]쪽으로 이동시킵니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
설정 정보를 최종 확인하고 이상이 없으면 Target Group을 생성합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

생성된 Target Group를 확인할 수 있습니다.
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Network Proxy Load Balancer 생성
[Load Balancer]에서 [로드밸런서 생성] 버튼을 클릭하고  [네트워크 프록시 로드밸런서]를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 로드밸런서 설정
필요한 로드밸런서 설정을 선택하는데, 그 중에서 서브넷은 혹시 생성되어 있지 않으면 [서브넷 생성] 버튼을 클릭해 로드밸런서 전용 서브넷을 생성한 후에 다시 돌아옵니다. 여기서는 [10.0.4.0/24] 대역으로 설정했습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 리스너 설정
리스너는 TCP 프로토콜에 80 포트를 선택하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target Group 선택
Target Group는 위쪽에서 생성한 [Proxy-Protocol-TG] 을 선택합니다. 선택하면 해당 Target Group 설정 내용을 바로 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
선택한 설정을 최종 확인하고 이상이 없으면 [로드밸런서 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 생성 확인
생성된 로드밸런서의 정보를 확인합니다. 특히 접속 정보와 서브넷은 이후 테스트에 사용되므로 꼭 기억하거나 메모해 두는 것이 좋습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## ACG 설정
로드밸런서 → 서버 접속이 가능하도록 서버 ACG에 규칙을 추가합니다.  
서버에 적용된 ACG의 규칙 설정 화면에서 프로토콜은 TCP,  접근소스는 로드밸런서 IP 대역인 10.0.4.0/24, 포트는 80을 입력하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-32.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 로드밸런서 접속 테스트
위에서 생성된 로드밸런서 접속 주소로 접속을 해보면 아래와 같은 화면을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Apache 접속 로그 확인
Apache 접속 로그 파일은 아래의 위치에 존재하지만, 저희는 네이버 클라우드 (Ncloud)의 상품 중 하나인 **Cloud Log Analytics**에서 로그를 수집해서 확인해보겠습니다. 
- Ubuntu Apache 로그파일 위치 : /var/log/apache2/access.log

- Cloud Log Analytics 설정 가이드 : &lt;a href=&quot;/analytics/ncloud_analytics_cloud_log_analytics_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/analytics/ncloud_analytics_cloud_log_analytics_guide.html&lt;/a&gt;

Cloud Log Analytics에서 수집한 로그를 확인해보면 위에서 설정했던 **Load Balancer의 IP 대역 (10.0.4.xx)**이 기록된 것을 확인할 수 있습니다.  

다음으로는 로드밸런서 IP가 아닌 실제 Client IP가 기록되도록 설정을 변경해 보겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-16-2.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## Proxy Protocol 설정
이제 실제 Client IP가 기록되도록 Proxy Protocol을 설정해보겠습니다.  
[Load Balancer] - [Target Group]에서 위에서 생성했던 Target Group를 선택하고 [TargetGroup 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-17.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

Target Group 설정 화면에서 [ProxyProtocol] 옵션을 체크하고 확인 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-18.png&quot; width=&quot;680&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

위에서 정상적으로 접속이 되었던 로드밸런서 주소로 접속하면 [Bad Request] 메시지가 뜨는 것을 확인할 수 있습니다.  
다음으로는 서버 설정을 변경해야 합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-19.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Apache 모듈 설치
Proxy Protocol을 사용할 때 필요한 Apache 모듈을 Ubuntu 서버에 설치하겠습니다.

### mod_myfixip 모듈 다운로드
아래 명령어로 mod_myfixip.c 파일을 다운로드 받습니다. 정상적으로 다운로드가 완료되면 **&apos;mod_myfixip.c&apos; saved** 라는 메시지를 확인할 수 있습니다.

```bash
~# wget --no-check-certificate https://raw.githubusercontent.com/ggrandes/apache24-modules/master/mod_myfixip.c
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-24.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 모듈 설치
이어서 apxs2 -c -i mod_myfixip.c 명령어로 모듈을 설치합니다.

```bash
~# apxs2 -c -i mod_myfixip.c
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-25.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### myfixip.load 파일 생성
mod_myfixip 모듈을 로드하기 위한 파일을 생성하고, LoadModule 관련 코드를 추가합니다.

``` bash
~# vi /etc/apache2/mods-available/myfixip.load
```
``` apache
LoadModule myfixip_module /usr/lib/apache2/modules/mod_myfixip.so
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-26.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### myfixip.conf 파일 생성
mod_myfixip 모듈 환경 설정 파일을 생성하고 모듈 관련 코드를 추가합니다.  
RewriteIPAllow 항목에는 로드밸런서 IP 대역 (ex: 192.168.0.0/16, 10.31.0.0/16 등)을 입력합니다.  
여기서는 위에서 설정했던 로드밸런서 IP 대역인 `10.0.4.0/24`를 입력했습니다. 

``` bash
~# vi /etc/apache2/mods-available/myfixip.conf
```
``` apache
&lt;IfModule mod_myfixip.c&gt;
  RewriteIPResetHeader off
  RewriteIPAllow 10.0.4.0/24
&lt;/IfModule&gt;
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-27.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 모듈 설치, Apache 재시작
다음 명령으로 myfixip 모듈을 설치하고 Apache를 재시작합니다.

``` bash
~# a2enmod myfixip
~# systemctl restart apache2
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-28.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## 최종 접속 테스트
모든 설정을 모두 마친 후에 서버에 접속해봅니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 최종 접속 로그 확인
접속 로그를 다시 확인해보면 이번에는 로드밸런서 IP가 아닌 Client IP가 기록된 것을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-29-2.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 참고URL

1. Proxy Protocol 설정하기
  - &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol&lt;/a&gt;

2. CentOS 서버에서 Proxy Protocol을 이용해 Client IP 확인하기
  - &lt;a href=&quot;/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html&lt;/a&gt;


</description>
            <pubDate>Thu, 04 Aug 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html</guid>
            
            <category>vpc</category>
            
            <category>load_balancer</category>
            
            <category>proxy</category>
            
            
        </item>
        
        <item>
            <title>Proxy Protocol을 이용해 Client IP 확인하기 | CentOS</title>
            <description>## 개요
Ncloud Load Balancer는 HTTP, HTTPS, TCP, SSL 이렇게 4가지의 프로토콜을 지원합니다.  
그런데, Load Balancer를 사용하면서 Client IP를 확인하려고 할 때 http, https 통신의 경우 X-Forwarded-For 헤더값이 지원되기에 Client IP를 확인할 수 있지만, 
TCP 통신의 경우 X-Forwarded-For 헤더를 사용할 수 없기에 Client IP를 확인하기 위해서는 Proxy Protocol 옵션을 활성화 시켜야 합니다.

여기서는 **Ncloud Network Proxy Load Balancer**의 TCP 프로토콜을 사용하면서 `Proxy Protocol 옵션을 활성화`시켜 **CentOS 서버에서 Client IP를 기록**하는 방법을 소개하겠습니다.

## 테스트 환경
- VPC 환경
- CentOS 7.8
- Apache 2.4.6
- Network Proxy Load Balancer
- Protocol/Port: TCP/80


## CentOS 서버 설치
서버를 생성하고 Apache 웹서버와 개발용 추가 모듈이 포함된 **httpd-devel 패키지**를 설치하고 간단한 웹페이지를 만들어 접속해 보았습니다.  

- VPC 환경에서 서버 생성하는 방법 : &lt;a href=&quot;/compute/ncloud_compute_server_vpc_create.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_server_vpc_create.html&lt;/a&gt;

```bash
~# yum -y install httpd httpd-devel
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Target Group 설정 
우선 Load Balancer를 생성하기 전에 Load Balancer에서 사용할 Target Group을 [Load Balancer] - [Target Group]에서 생성합니다.

### Target Group 생성
Target Group의 이름를 입력하고 Target 유형은 [VPC Server]를 선택, 다음으로 VPC 대역을 선택합니다.  
그리고, `프로토콜은 PROXY_TCP를 선택`하고, 포트는 80포트를 사용하겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Health Check 설정
Health Check 할 프로토콜은 TCP를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target 추가
앞에서 생성했던 서버 2대를 선택하고 [적용 Target]쪽으로 이동시킵니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
설정 정보를 최종 확인하고 이상이 없으면 Target Group을 생성합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

생성된 Target Group를 확인할 수 있습니다.
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Network Proxy Load Balancer 생성
[Load Balancer]에서 [로드밸런서 생성] 버튼을 클릭하고  [네트워크 프록시 로드밸런서]를 선택합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 로드밸런서 설정
필요한 로드밸런서 설정을 선택하는데, 그 중에서 서브넷은 혹시 생성되어 있지 않으면 [서브넷 생성] 버튼을 클릭해 로드밸런서 전용 서브넷을 생성한 후에 다시 돌아옵니다. 여기서는 [10.0.4.0/24] 대역으로 설정했습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 리스너 설정
리스너는 TCP 프로토콜에 80 포트를 선택하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Target Group 선택
Target Group는 위쪽에서 생성한 [Proxy-Protocol-TG] 을 선택합니다. 선택하면 해당 Target Group 설정 내용을 바로 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 설정 확인
선택한 설정을 최종 확인하고 이상이 없으면 [로드밸런서 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 생성 확인
생성된 로드밸런서의 정보를 확인합니다. 특히 접속 정보와 서브넷은 이후 테스트에 사용되므로 꼭 기억하거나 메모해 두는 것이 좋습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## ACG 설정
로드밸런서 → 서버 접속이 가능하도록 서버 ACG에 규칙을 추가합니다.  
서버에 적용된 ACG의 규칙 설정 화면에서 프로토콜은 TCP,  접근소스는 로드밸런서 IP 대역인 10.0.4.0/24, 포트는 80을 입력하고 추가합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-32.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 로드밸런서 접속 테스트
위에서 생성된 로드밸런서 접속 주소로 접속을 해보면 아래와 같은 화면을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Apache 접속 로그 확인
Apache 접속 로그 파일은 아래의 위치에 존재하지만, 저희는 네이버 클라우드 (Ncloud)의 상품 중 하나인 **Cloud Log Analytics**에서 로그를 수집해서 확인해보겠습니다. 
- CentOS Apache 로그파일 위치 : /var/log/httpd/access_log

- Cloud Log Analytics 설정 가이드 : &lt;a href=&quot;/analytics/ncloud_analytics_cloud_log_analytics_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/analytics/ncloud_analytics_cloud_log_analytics_guide.html&lt;/a&gt;

Cloud Log Analytics에서 수집한 로그를 확인해보면 위에서 설정했던 **Load Balancer의 IP 대역 (10.0.4.xx)**이 기록된 것을 확인할 수 있습니다.  

다음에는 로드밸런서 IP가 아닌 실제 Client IP가 기록되도록 설정을 변경해 보겠습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-16-1.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## Proxy Protocol 설정
이제 실제 Client IP가 기록되도록 Proxy Protocol을 설정해보겠습니다.  
[Load Balancer] - [Target Group]에서 위에서 생성했던 Target Group를 선택하고 [TargetGroup 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-17.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

Target Group 설정 화면에서 [ProxyProtocol] 옵션을 체크하고 확인 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-18.png&quot; width=&quot;680&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

위에서 정상적으로 접속이 되었던 로드밸런서 주소로 접속하면 [Bad Request] 메시지가 뜨는 것을 확인할 수 있습니다.  
다음으로는 서버 설정을 변경해야 합니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-19.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## Apache 모듈 설치
Proxy Protocol을 사용할 때 필요한 Apache 모듈을 CentOS 서버에 설치하겠습니다.

### mod_myfixip 모듈 다운로드
아래 명령어로 mod_myfixip.c 파일을 다운로드 받습니다. 정상적으로 다운로드가 완료되면 **&apos;mod_myfixip.c&apos; saved** 라는 메시지를 확인할 수 있습니다.

```bash
~# wget --no-check-certificate https://raw.githubusercontent.com/ggrandes/apache24-modules/master/mod_myfixip.c
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-20.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### 모듈 설치
이어서 /{아파치가 설치된 경로}/bin/apxs -c -i mod_myfixip.c 명령어로 모듈을 설치합니다.

```bash
~# /usr/bin/apxs -c -i mod_myfixip.c
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-21.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### httpd.conf 설정 변경
모듈 설치가 완료된 후에 httpd.conf 파일을 열어서 제일 아래쪽에 아래 코드를 추가합니다.  
RewriteIPAllow 항목에는 로드밸런서 IP 대역 (ex: 192.168.0.0/16, 10.31.0.0/16 등)을 입력합니다.  
여기서는 위에서 설정했던 로드밸런서 IP 대역인 `10.0.4.0/24`를 입력했습니다. 

``` bash
~# vi /etc/httpd/conf/httpd.conf
```
``` apache
LoadModule myfixip_module modules/mod_myfixip.so

&lt;IfModule mod_myfixip.c&gt;
  RewriteIPResetHeader off
  RewriteIPAllow 10.0.4.0/24
&lt;/IfModule&gt;
```

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-22.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

### Apache 재시작
설정을 마친 후에 Apache를 재시작합니다.

``` bash
~# systemctl restart httpd
```
{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-23.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}


## 최종 접속 테스트
모든 설정을 모두 마친 후에 서버에 접속해봅니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 최종 접속 로그 확인
접속 로그를 다시 확인해보면 이번에는 로드밸런서 IP가 아닌 Client IP가 기록된 것을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud-networking-proxy-protocol-client-ip-logging-29-1.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Network Proxy Load Balancer에서 
Proxy Protocol을 이용해 클라이언트 IP 주소를 확인하는 방법&quot; caption=&quot;&quot; %}

## 참고 URL

1. Proxy Protocol 설정하기
  - &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole#proxy-protocol&lt;/a&gt;

2. Ubuntu 서버에서 Proxy Protocol을 이용해 Client IP 확인하기
  - &lt;a href=&quot;/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-ubuntu.html&lt;/a&gt;


</description>
            <pubDate>Thu, 04 Aug 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/networking/ncloud-networking-proxy-protocol-client-ip-logging-centos.html</guid>
            
            <category>vpc</category>
            
            <category>load_balancer</category>
            
            <category>proxy</category>
            
            
        </item>
        
        <item>
            <title>VPC 환경에서 Application Load Balancer 생성하기</title>
            <description>## 개요
네이버 클라우드 VPC 환경의 대표적인 Load Balancer인 Application Load Balancer 를 생성하는 가이드입니다.  
VPC와 Subnet을 생성하고, 테스트를 위한 서버 2대를 CentOS와 Ubuntu 각각 1대씩 준비해서 Application Load Balancer와 연결하고 접속해보는 과정까지 정리해보겠습니다.

## VPC 생성
VPC 환경에서는 먼저 VPC를 먼저 생성해야 하며, 이미 만들어진 VPC가 있다면 그대로 이용하셔도 됩니다.  
VPC의 IP 주소 범위는 private 대역 (10.0.0.0/8, 172.160.0./12, 192.168.0.0/16) 내에서 /16 ~ /28 범위여야 합니다.  
여기서는 192.168.0.0/16 범위의 VPC를 생성하겠습니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_01.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

## Subnet 생성
Load Balancer를 생성할 때 Server와는 다른 Subnet을 사용해야 정상 작동합니다.  
그래서 여기서도 Load Balancer용 Subnet과 테스트 Server용 Subnet을 각각 생성하도록 하겠습니다.

### Load Balancer용 Subnet 생성
Load Balancer는 Private Subnet에 위치해야 하므로 192.168.1.0/24 IP 대역에 Internet Gateway 전용 여부 옵션은 N (Private)을 선택합니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_02.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}


### Server용 Subnet 생성
일반 서버용 Subnet은 192.168.2.0/24 IP 대역에 Internet Gateway 전용 여부 옵션은 Y (Public)을 선택합니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_03.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

## 테스트용 Server 생성
테스트를 위한 서버는 위에서 생성했던 192.168.2.0/24 IP 대역의 Subnet을 선택하고 Network Interface도 동일한 Subnet을 선택합니다.  
Load Balancer를 테스트 하기 위한 서버이므로 2대를 생성하면서 1대는 CentOS, 나머지 1대는 Ubunt로 생성하겠습니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_04.jpg&quot; width=&quot;850&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

## Target Group 생성
[VPC] - [Load Balancer] - [Target Group]에서 Load Balancer가 바라보게 될 Target Group를 설정합니다.  
여기서는 HTTP 프로토콜과 80 포트를 선택하겠습니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_05.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

다음으로 Health Check 설정에서는 HTTP, 80포트, HEAD Method를 선택합니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_06.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

마지막으로 Target 즉, 대상이 되는 서버 2대 (lb-test-ubuntu, lb-test-centos)를 선택하고, 적용 Target쪽으로 이동시키는 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_07.jpg&quot; width=&quot;810&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

대상 서버들이 적용 Target으로 설정된 모습입니다. 이후에는 전체 설정을 다시 확인하고 생성 완료를 하면 됩니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_08.jpg&quot; width=&quot;810&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}


## Load Balancer 생성
네이버 클라우드 VPC 환경에서 제공하는 Load Balancer는 애플리케이션 로드밸런서, 네트워크 로드밸런서, 네트워크 프록시 로드밸런서 이렇게 3가지가 있습니다.  
그 중에서 가장 많이 사용하는 HTTP, HTTPS 트래픽을 사용하는 웹 애플리케이션용 Application Load Balancer를 생성하겠습니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_09.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

Network는 Public IP, Subnet은 앞에서 생성했던 192.168.1.0/24 대역의 Subnet을 선택합니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_10.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

리스너 설정에서 프로토콜은 HTTP, 포트는 80을 선택하고 [추가] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_11.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

Target Group은 앞에서 생성했던 test-tg을 선택하면, 아래에 해당 Target Group의 설정이 표시됩니다.  
다음으로 전체 설정을 다시 확인하고 최종 생성하기 버튼을 클릭하면 Load Balancer가 생성됩니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_12.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

## ACG 설정
Load Balancer가 정상 작동하기 위해서는 [Server] - [ACG]에서 [Inbound 규칙]에 Load Balancer용 Subnet 대역인 192.168.1.0/24 대역의 80 포트를 허용포트로 설정해 줍니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_14.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

## Server 웹서버 설정
Application Load Balancer를 테스트 하기 위해서는 테스트 Server에 웹서버가 설정되어 있어야 하는데, 네이버 클라우드 VPC 환경에서는 LAMP, LEMP 등의 웹서버가 설정된 이미지를 제공하지 않습니다.  
그래서 기본 OS만 설치된 서버에 Apache 웹서버와 php를 설치하도록 하겠습니다. 설치 작업은 아래와 같이 Ubuntu와 CentOS 각각 스크립트를 만들어서 한번에 설치하는 방법을 사용했는데, 필요에 따라서는 하나씩 별도로 설치하셔도 됩니다.

### Ubuntu에 Apache, PHP 설치하기 스크립트
Apache와 PHP를 설치하고 기본문서 index.html에 서버의 호스트명을 출력하는 스크립트를 적용합니다.

사용한 OS는 Ubuntu 16.04 입니다.

``` bash
#!/bin/bash

apt update
apt install apache2 
apt install php
apt install libapache2-mod-php

systemctl start apache2

cd /var/www/html
echo &quot;&lt;?php&quot; &gt; index.html
echo &quot;echo \&quot;Your server name is \&quot;.(gethostname()).\&quot;&lt;br&gt;\&quot;;&quot; &gt;&gt; index.html
echo &quot;?&gt;&quot; &gt;&gt; index.html

echo AddType application/x-httpd-php .php .php3 .php4 .php5 .html .htm .inc &gt;&gt; phpadd
cat phpadd &gt;&gt; /etc/apache2/apache2.conf

systemctl restart apache2
systemctl enable apache2
systemctl status apache2
```
&lt;br /&gt;

### CentOS에 Apache, PHP 설치하기 스크립트
사용한 OS는 CentOS 7.3 입니다.

``` bash
#!/bin/bash

yum -y install httpd php

systemctl start httpd

cd /var/www/html
echo &quot;&lt;?php&quot; &gt; index.html
echo &quot;echo \&quot;Your server name is \&quot;.(gethostname()).\&quot;&lt;br&gt;\&quot;;&quot; &gt;&gt; index.html
echo &quot;?&gt;&quot; &gt;&gt; index.html

echo AddType application/x-httpd-php .php .php3 .php4 .php5 .html .htm .inc &gt;&gt; phpadd
cat phpadd &gt;&gt; /etc/httpd/conf/httpd.conf

systemctl restart httpd
systemctl enable httpd
systemctl status httpd
```

## 접속 테스트
앞에서 생성했던 Load Balancer 정보에서 접속 정보용 주소를 확인하고 복사합니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_16.jpg&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

복사한 Load Balancer 주소를 웹브라우저에 입력하고 계속 새로 고침을 해보면 아래와 같이 CentOS 서버와 Ubuntu에 접속될 때 마다 해당 서버의 호스트명이 출력되면서 Load Balancer가 정상 작동하는 것을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_15-1.jpg&quot; width=&quot;560&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;networking/ncp_networking_load_balancer_application_15-2.jpg&quot; width=&quot;560&quot; alt=&quot;Ncloud VPC 환경에서 Application Load Balancer 생성하기 가이드&quot; caption=&quot;&quot; %}


## 참고 URL
1. Application Load Balancer 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-loadbalancer-applicationlbconsole&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-loadbalancer-applicationlbconsole&lt;/a&gt;

2. Target Group 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-loadbalancer-targetgroupconsole&lt;/a&gt;
</description>
            <pubDate>Thu, 04 Aug 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/networking/ncloud_networking_load_balancer_application_lb.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/networking/ncloud_networking_load_balancer_application_lb.html</guid>
            
            <category>vpc</category>
            
            <category>load_balancer</category>
            
            
        </item>
        
        <item>
            <title>Classic 환경 Cloud DB for MySQL 읽기 부하 로드밸런서로 분산시키는 방법</title>
            <description>## 개요
MySQL DB서버의 부하를 줄이기 위해 보통 읽기 전용 DB서버를 생성하게 되는데, 읽기 전용 서버를 여러대 생성해서 로드밸런서(Load Balancer)로 연결하면 읽기 부하를 분산 시키고 좀 더 안정적인 서비스가 가능해집니다.  

여기서는 Ncloud (네이버 클라우드) Classic 환경에서 관리형 DB인 Cloud DB for MySQL의 **읽기 전용 Slave DB를 로드밸런서에 연결**하고 제대로 부하가 분산되는지 확인해보겠습니다.

## 사전 준비
DB 접속과 부하 분산을 테스트할 서버가 필요합니다. 여기서는 CentOS 7.8 서버를 준비했습니다.

## DB 서버 생성
우선 [Cloud DB for MySQL] - [DB Server]에서 DB를 생성합니다.

### 서버 설정
서버 설정에서 중요한 부분은 [**고가용성 지원**] 항목입니다. Slave DB를 추가하기 위해서는 [**고가용성 지원**] 항목을 체크해야 합니다. 
혹시 고가용성 지원 없이 서버를 생성했을 경우 이후에 [**고가용성 지원**]을 설정하면 문제 없이 Slave DB를 추가할 수 있습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

### DB 설정
그 외 필요한 DB 설정을 입력합니다. 여기서 Backup 설정은 고가용성을 선택했을 경우 자동으로 사용하도록 설정됩니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}


## Slave DB 추가
DB 서버 생성이 완료되면 아래와 같이 [Master], [Standy Master] 2대의 서버가 생성된 것을 확인할 수 있습니다.  
Master 서버를 선택하고 [DB 관리] 메뉴에서 [**Slave 추가**]를 선택합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

### Slave DB 정보
Slave DB 서버 추가 팝업에서는 특별히 수정할 부분 없이 [예] 버튼을 클릭하면 추가 됩니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Slave DB Server는 Master DB Server와 동일한 스펙 (DB Server 타입, 스토리지 타입, 스토리지 용량)및 DB Config 설정으로 생성됩니다. Slave DB Server 역시 Master DB Server와 동일한 요금이 청구되며, 사용한 시간으로 과금됩니다.&quot; %}

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-04.png&quot; width=&quot;685&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

### 생성 완료
Slave DB를 1대 생성했으면 동일한 방법으로 하나 더 생성합니다. 
여기서는 [test-003], [test-004]라는 이름으로 생성되었습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

## ACG 설정
다음으로 방화벽 ACG를 미리 설정해야 하는데, Master DB를 선택하고 아래쪽에 있는 [**ACG**] 항목을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

ACG 리스트에서 Cloud DB를 생성할때 자동으로 생성된 [cloud-db-OOOO]라는 이름의 ACG를 선택하고 [ACG 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

### 규칙 설정
ACG에 설정이 필요한 규칙은 2가지입니다.  
- 부하 분산을 위한 Load Balancer -&gt; Cloud DB for MySQL로 접근을 허용하는 규칙
- 테스트를 위한 Server -&gt; Cloud DB for MySQL로 접근을 허용하는 규칙

Load Balancer -&gt; Cloud DB for MySQL로 접근을 허용하는 규칙은 Load Balancer 전용 ACG [**ncloud-load-balancer**]를 [접근 소스] 항목에 추가합니다.  

Server -&gt; Cloud DB for MySQL로 접근을 허용하는 규칙은 [접근 소스] 항목에 [Server IP] 또는 [Server에 설정된 ACG]를 입력하면 됩니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

## Load Balancer 생성
마지막으로 로드밸런서를 생성해야 하는데, 로드밸런서를 생성할 때 Slave DB와 연결하려면 `네트워크 항목을 [Private IP]로 설정`해야 합니다.  
그리고 프로토콜은 TCP, 포트는 3306으로 설정하겠습니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

### 서버 추가
[서버 추가] 화면에는 적용할 서버 리스트에 위에서 생성했던 Slave DB 서버가 나타나는데, 모두 선택하고 오른쪽으로 이동 시킵니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

설정에 이상이 없으면 로드밸런서가 생성되고, 적용 서버의 연결 상태가 모두 [성공]으로 나타납니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

## 테스트 서버 설정
읽기 부하가 제대로 분산되는지 테스트 하기 위해 준비된 서버에 [**MySQL Client**]를 설치합니다.

{% include note.html content=&quot;CentOS 7부터는 yum으로 설치하는 MySQL의 기본 데이터베이스가 MariaDB로 변경되었습니다.&quot; %}

``` bash
~# yum -y install mysql
```

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-12.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

### 접속 테스트
설치된 MySQL Client를 이용해서 Load Balancer IP로 접속한 후에 접속한 DB 서버의 호스트명을 확인하는 쿼리를 실행합니다.  

여러 차례 반복해보면 아래와 같이 위에서 추가했던 Slave DB [test-003], [test-004]에 각각 접속되는 것을 확인할 수 있습니다.

``` bash
~# mysql -h {Load Balancer IP} -u {계정} -p
```

``` sql
MySQL [(none)]&gt; SELECT @@hostname;
```

[test-003에 접속된 상태]
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-13.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}

[test-004에 접속된 상태]
{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-14.png&quot; width=&quot;840&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}


## DB 삭제
테스트를 끝낸 DB를 삭제하려고 할 때 [Slave나 Recovery DB 서버가 있는 경우 Master DB를 삭제할 수 없습니다.]라는 메시지가 나타나는 것을 확인할 수 있습니다.  

그래서 DB를 삭제할 때는 [Slave DB]부터 삭제해야 하고, [Slave DB]를 삭제할 때에도 동시에 삭제할 수 없고 1대씩 차례로 삭제해야 합니다.

{% include image.html file=&quot;database/ncloud-database-cloud-db-for-mysql-read-load-balancing-15.png&quot; width=&quot;490&quot; alt=&quot;Ncloud Classic 환경에서 Cloud DB for MySQL 디비의 읽기 부하를 로드밸런서로 분산시키는 방법&quot; caption=&quot;&quot; %}</description>
            <pubDate>Wed, 20 Jul 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-mysql-read-load-balancing.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-cloud-db-for-mysql-read-load-balancing.html</guid>
            
            <category>database</category>
            
            <category>mysql</category>
            
            <category>mariadb</category>
            
            <category>load-balancer</category>
            
            
        </item>
        
        <item>
            <title>Jenkins 서버 설치 가이드 | Ubuntu</title>
            <description>## 개요
Ncloud (네이버 클라우드)의 Classic 환경에서는 Jekins 서버 이미지를 제공하고 있지만, VPC 환경에서는 제공하지 않기에 VPC 환경 Ubuntu 서버에 Jekins 서버를 설치하는 과정을 정리해보겠습니다.

## Jenkins란
Jenkins는 지속적 통합(Continuous Integration, CI)과 지속적 배포(Continuous Delivery, CD)를 위한 대표적인 도구로 빌드, 테스트, 배포 프로세스를 자동화하여 소프트웨어 품질 향상과 개발 생산성 향상에 도움을 주는 도구입니다.

## Jenkins 특징

- 지속적 통합을 사용하여 빌드, 테스트, 배포 과정을 자동화하여 개발 생산성을 향상할 수 있습니다.
- 자동화 테스트를 통하여 소프트웨어 품질을 향상할 수 있습니다.
- 지속적인 통합을 통해 안정적인 릴리즈를 빠르게 배포할 수 있습니다.


## 설치 과정 

### 루트 인증서 설치
Jenkins의 저장소 추가시 인증서 에러가 발생할 경우를 대비해 루트 인증서를 설치 합니다.

```bash
~# apt-get -y install ca-certificates
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

### 저장소 키 추가
이제 Jenkins의 패키지 저장소를 추가 하기 위한 저장소 키를 가져옵니다.

```bash
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key \
    | sudo tee /usr/share/keyrings/jenkins-keyring.asc &gt; /dev/null
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

### 저장소 추가
그런다음 Jenkins의 패키지 저장소 항목을 추가 합니다.

```bash
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
    /etc/apt/sources.list.d/jenkins.list &gt; /dev/null
``` 

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

### JAVA 설치
Jenkins를 구동하기 위해서는 JAVA가 필요하고, 추가로 fontconfig도 설치합니다.

{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;※ JAVA의 경우 Jenkins최신버전을 기준으로 8 혹은 11 버전이 필요 합니다.&quot; %}

```bash
~# apt-get update
~# apt-get -y install fontconfig openjdk-11-jre
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-06.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


### Jenkins 설치
모든 준비가 끝났으면 Jenkins를 설치합니다.

```bash
~# apt-get -y install jenkins
```


{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-07.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


### Jenkins 서비스 시작
Jekins 서비스를 시작하고 정상 작동하고 있는지 다음과 같이 확인합니다.

```bash
~# systemctl start jenkins
~# systemctl status jenkins
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-08.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 방화벽 ACG 설정
Jekins 서버가 사용하는 기본 포트는 8080 입니다. Ncloud 방화벽 ACG에서 8080 포트를 허용해줍니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 초기 설정

### Port 변경

{% include callout_v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Jenkins의 기본 접속 Port는 /etc/default/jenkins 의 HTTP_PORT= 항목에서 변경 할 수 있습니다.&quot; %} 

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-ubuntu-10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 Ubuntu에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

### 초기 패스워드 확인

설치가 완료된 후 http://{서버 IP주소}:8080 으로 접속하면 아래의 스크린샷처럼 초기 어드민 패스워드를 입력하는 화면이 나타납니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

초기 어드민 패스워드는 **/var/lib/jenkins/secrets/initialAdminPassword** 파일에 기록되어 있습니다.  
cat 명령어로 초기 패스워드를 확인합니다.

```bash
~# cat /var/lib/jenkins/secrets/initialAdminPassword
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-09.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

## 플러그인 설치
플러그인 설치는 추천 플러그인을 설치하는 옵션과 직접 선택해서 설치하는 옵션이 있습니다. 일단 여기서는 추천 플러그인을 선택하겠습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

추천 플러그인을 선택하면 아래와 같이 설치과정이 나타납니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

직접 플러그인을 선택할 경우 아래와 같이 여러 플러그인 중에서 설치하고 싶은 플러그인을 선택할 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 어드민 계정 정보 입력
플러그인 설치를 마치면 아래와 같이 어드민 계정 정보를 입력하게 됩니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 설치 완료
필요한 정보를 모두 입력하고 나면 마지막으로 Jekins URL을 확정하고 저장합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

설치가 모두 끝났습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

이제 Jekins에 접속하면 아래와 같은 화면을 확인할 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-16.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 참고 URL
1. Jeins Debian Packages
    - &lt;a href=&quot;https://pkg.jenkins.io/debian-stable/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all&quot;&gt;https://pkg.jenkins.io/debian-stable/&lt;/a&gt;

2. Jenkins User Documentation
    - &lt;a href=&quot;https://www.jenkins.io/doc/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all&quot;&gt;https://www.jenkins.io/doc/&lt;/a&gt;


</description>
            <pubDate>Thu, 14 Jul 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/dev-tools/ncloud-dev-tools-jenkins-server-install-guide-ubuntu.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/dev-tools/ncloud-dev-tools-jenkins-server-install-guide-ubuntu.html</guid>
            
            <category>github</category>
            
            
        </item>
        
        <item>
            <title>Jenkins 서버 설치 가이드 | CentOS</title>
            <description>## 개요
Ncloud (네이버 클라우드)의 Classic 환경에서는 Jekins 서버 이미지를 제공하고 있지만, VPC 환경에서는 제공하지 않기에 VPC 환경 CentOS 서버에 Jekins 서버를 설치하는 과정을 정리해보겠습니다.

## Jenkins란
Jenkins는 지속적 통합(Continuous Integration, CI)과 지속적 배포(Continuous Delivery, CD)를 위한 대표적인 도구로 빌드, 테스트, 배포 프로세스를 자동화하여 소프트웨어 품질 향상과 개발 생산성 향상에 도움을 주는 도구입니다.

## Jenkins 특징

- 지속적 통합을 사용하여 빌드, 테스트, 배포 과정을 자동화하여 개발 생산성을 향상할 수 있습니다.
- 자동화 테스트를 통하여 소프트웨어 품질을 향상할 수 있습니다.
- 지속적인 통합을 통해 안정적인 릴리즈를 빠르게 배포할 수 있습니다.


## 설치 과정 

### 루트 인증서 설치
Jenkins의 저장소 추가시 인증서 에러가 발생할 경우를 대비해 루트 인증서를 설치 합니다.

``` bash
~# yum -y install ca-certificates
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-01.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


### 패키지 저장소 추가
이제 Jenkins의 패키지 저장소를 추가합니다.

```bash
~# wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

### GPG 키 추카
그런 다음 Jenkins GPG 키를 다음과 같이 추가 합니다.

```bash
~# rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


### JAVA 설치
Jenkins를 구동하기 위해서는 JAVA가 필요하고, 추가로 fontconfig도 설치합니다.

{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;※ JAVA의 경우 Jenkins최신버전을 기준으로 8 혹은 11 버전이 필요 합니다.&quot; %}

```bash
~# yum -y install fontconfig java-11-openjdk
```
{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


### Jenkins 설치
모든 준비가 끝났으면 Jenkins를 설치합니다.

```bash
~# yum -y install jenkins
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

### Jenkins 서비스 시작
Jekins 서비스를 시작하고 정상 작동을하고 있는지 다음과 같이 확인합니다.

``` bash
~# systemctl start jenkins
~# systemctl status jenkins
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-06.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 방화벽 ACG 설정
Jekins 서버가 사용하는 기본 포트는 8080 입니다. Ncloud 방화벽 ACG에서 8080 포트를 허용해줍니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 초기 설정

### Port 변경

{% include callout_v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Jenkins의 기본 접속 Port는 8080인데 /etc/sysconfig/jenkins 의 JENKINS_PORT= 항목에서 변경 할 수 있습니다.&quot; %} 

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-17.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

### 초기 패스워드 확인

설치가 완료 되면 http://{서버 IP주소}:8080 으로 접속하면 아래의 스크린샷처럼 초기 어드민 패스워드를 입력하는 화면이 나타납니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

초기 어드민 패스워드는 **/var/lib/jenkins/secrets/initialAdminPassword** 파일에 기록되어 있습니다.  
cat 명령어로 초기 패스워드를 확인합니다.

```bash
~# cat /var/lib/jenkins/secrets/initialAdminPassword
```

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-09.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

## 플러그인 설치
플러그인 설치는 추천 플러그인을 설치하는 옵션과 직접 선택해서 설치하는 옵션이 있습니다. 일단 여기서는 추천 플러그인을 선택하겠습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

추천 플러그인을 선택하면 아래와 같이 설치과정이 나타납니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

직접 플러그인을 선택할 경우 아래와 같이 여러 플러그인 중에서 설치하고 싶은 플러그인을 선택할 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 어드민 계정 정보 입력
플러그인 설치를 마치면 아래와 같이 어드민 계정 정보를 입력하게 됩니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 설치 완료
필요한 정보를 모두 입력하고 나면 마지막으로 Jekins URL을 확정하고 저장합니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

설치가 모두 끝났습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}

이제 Jekins에 접속하면 아래와 같은 화면을 확인할 수 있습니다.

{% include image.html file=&quot;dev-tools/ncloud-dev-tools-jenkins-install-guide-centos-16.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 CentOS에 Jenkins 서버를 설치하는 방법&quot; caption=&quot;&quot; %}


## 참고 URL
1. Jeins Redhat Packages
    - &lt;a href=&quot;https://pkg.jenkins.io/redhat-stable/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all&quot;&gt;https://pkg.jenkins.io/redhat-stable/&lt;/a&gt;

2. Jenkins User Documentation
    - &lt;a href=&quot;https://www.jenkins.io/doc/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all&quot;&gt;https://www.jenkins.io/doc/&lt;/a&gt;


</description>
            <pubDate>Fri, 08 Jul 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/dev-tools/ncloud-dev-tools-jenkins-server-install-guide-centos.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/dev-tools/ncloud-dev-tools-jenkins-server-install-guide-centos.html</guid>
            
            <category>github</category>
            
            
        </item>
        
        <item>
            <title>내 IP 주소 확인하기</title>
            <description>&lt;iframe src=&quot;https://3rdeyesys.com/ip/&quot; style=&quot;width:100%;height:150px;border:1px solid gray;background-color:#a6e1ec&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;

## IPv4
111.222.333.444처럼 우리가 일반적으로 알고 있는 IPv4는 32비트로 구성된 IP 주소 체계로 이론적으로는 **2^32** 즉, 4,294,967,296개의 IP주소를 부여할 수 있습니다.  
2011년 전세계 IP주소를 관리하고 있는 IANA(Internet Assigned Numbers Authority)에서 인터넷에 연결되는 기기가 급속도로 증가하면서 할당할 수 있는 IP주소가 고갈되어 감에 따라 IPv4의 신규 할당을 공식 종료했고, 그로 인해 신규 IP주소 체계인 IPv6에 대한 관심이 높아졌습니다.

## IPv6
IPv6는 ae06:2610:122a:2002:1849:2874:27c1:18f6 처럼 128비트로 구성된 신규 IP 주소 체계로 이론적으로는 **2^128** 개의 IP 주소를 부여할 수 있어 IP 주소의 부족은 없을 것이라고 이야기 되고 있습니다.


## Private IP (사설 아이피) 대역
국제 인터넷 표준화 기구(IETF)에서 정한 RFC 1918 표준에 따라  IP 주소, 최상위 도메인 등을 관리하는 단체인 IANA(Internet Assigned Numbers Authority)가 아래의 주소를 사설 IP 대역으로 지정해두고 있습니다.

- A Class: 10.0.0.0 - 10.255.255.255 (10.0.0.0/8)
- B Class: 172.16.0.0 - 172.31.255.255 (172.16.0.0/12)
- C Class: 192.168.0.0 - 192.168.255.255 (192.168.0.0/16)

{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;
Ncloud (네이버 클라우드)의 VPC(Virtual Private Cloud)는 퍼블릭 클라우드 상에 논리적으로 완전하게 분리된 고객전용 네트워크를 제공하는 서비스로, 위에서 설명한 RFC 1918 표준에 따른 최대 /16의 IP 네트워크 공간을 제공하고 있습니다.
&quot; %}</description>
            <pubDate>Thu, 07 Jul 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/networking/ncloud-networking-find-my-ip-address.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/networking/ncloud-networking-find-my-ip-address.html</guid>
            
            <category>ip</category>
            
            <category>vpc</category>
            
            <category>acg</category>
            
            
        </item>
        
        <item>
            <title>Ncloud 방화벽 ACG 권장설정과 Custom ACG 설정 예시</title>
            <description>## 개요
Ncloud (네이버 클라우드)의 IP/Port 기반 필터링 방화벽 서비스인 ACG(Access Control Group) 권장설정과 Custom ACG 설정할 때 참고할 만한 예시를 몇가지 정리해보겠습니다.


## Inboud 기본 규칙 삭제

{% include callout_v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;서버 생성 시에 기본으로 생성되는 Default ACG에는 아래처럼 22, 3389 포트에 대해 0.0.0.0/0 즉, 전체 IP에 대해 접근이 허용되어 있는데 보안을 위해 이 항목을 삭제하고 지정된 IP에서만 접속하도록 수정하는 것을 적극 권장합니다.&quot; %}

### VPC 화면

아래는 Default ACG가 생성되면서 설정된 전체 접근 허용 상태입니다. 여기서 X버튼을 클릭해서 [0.0.0.0/0] 대역의 설정 2가지를 모두 삭제합니다.
{% include image.html file=&quot;security/ncp_security_acg_vpc_inbound.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

위에서 기본 설정을 삭제하고 특정 IP만 접근 허용 상태입니다.  
일반적으로 `[myip] 버튼을 클릭해서 현재 접속한 PC의 IP를 허용`하게 됩니다.
{% include image.html file=&quot;security/ncp_security_acg_vpc_inbound_02.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

### Classic 화면

아래도 Default ACG가 생성되면서 설정된 전체 접근 허용 상태입니다. 여기서 X버튼을 클릭해서 [0.0.0.0/0] 대역의 설정 2가지를 모두 삭제합니다.
{% include image.html file=&quot;security/ncp_security_acg_classic.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

위에서 기본 설정을 삭제하고 특정 IP만 접근 허용한 상태입니다.  
일반적으로 `[myip] 버튼을 클릭해서 현재 접속한 PC의 IP를 허용`하게 됩니다.
{% include image.html file=&quot;security/ncp_security_acg_classic_02.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}


## 용도별 ACG 구분
ACG는 사용하는 서버들을 용도별로 구분해서 기본 ACG외에 별도의 Custom ACG를 아래의 예시처럼 그룹별로 생성해서 적용하는 것이 좋습니다.  

### VPC 환경에서 ACG 생성
[Server] - [ACG]에서 생성할 수 있으며 이름 규칙은 최소 3자, 최대 30자, 소문자만, 숫자와 하이픈(-) 사용 가능합니다.  
그리고, ACG를 적용할 VPC도 선택해야 합니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-01.png&quot; width=&quot;715&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### Classic 환경에서 ACG 생성
[Server] - [ACG]에서 생성할 수 있으며 이름 규칙은 최소 6자, 최대 30자, 소문자만, 숫자와 하이픈(-) 사용 가능합니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-02.png&quot; width=&quot;715&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### 용도별 Custom ACG 생성 예시
아래의 Custom ACG 명칭은 임의로 작성한 것이며, 어떤 규칙으로 이름을 정할 것인가는 각자 자체 기준에 따라 편하신대로 정하시면 됩니다.

- DB-ACG
- APP-ACG
- WAS-ACG
- WEB-ACG
- BILL-ACG
- Jenkins-ACG
- Login-Server-ACG
- Lobby-Server-ACG
- Chat-Server-ACG
- PVP-Server-ACG
- Live-Streaming-ACG
- VOD-Server-ACG
- API-Server-ACG
- Bill-DB-ACG
- Bill-APP-ACG
- Admin-Tool-ACG
- Live-Service-ACG
- Dev-System-ACG
- QA-System-ACG
- Home-Access-ACG
- External-Developer-ACG
- Partner-Company-ACG

### 복수의 ACG 적용
1개 서버에 허용이 필요한 설정을 모두 추가한 1개의 ACG만 무리하게 적용하려 하기 보다는 위의 예시처럼 용도별로 구분한 ACG를 여러 개 적용하는 것을 추천합니다.
예를 들어 아래와 같이 각각의 용도별 서버들에는 이런 식으로 ACG를 구분해서 적용할 수도 있습니다.  

&lt;br /&gt;예를 들어 채팅 서버에 ACG를 적용할 때의 예시는 다음과 같습니다.
- 적용 ACG: APP-ACG, Chat-Server-ACG

&lt;br /&gt;마찬가지로 QA 빌링 DB에 ACG를 적용할 때의 예시는 다음과 같습니다.
- 적용 ACG: DB-ACG, BILL-ACG, QA-System-ACG



## Custom ACG 적용 순서

1. ACG 생성
- 우선 위의 방법대로 ACG를 용도별로 구분해서 생성합니다.

2. ACG 적용
- 다음으로 생성한 ACG를 서버에 적용하는 단계입니다. 아래쪽에서 VPC, Classic 각각의 환경별로 살펴보겠습니다.

### VPC 환경
VPC 환경은 NIC에 ACG가 적용되는 구조이므로 NIC당 최대 3개까지 할당할 수 있습니다. 

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### Classic 환경
Classic 환경에서는 서버에 적용되는 구조이고, 최대 5개까지 선택 가능합니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;이때 **Classic 환경 ACG는 서버를 생성하는 단계에서만 적용할 수** 있습니다.&lt;br /&gt; `서버 생성이 완료된 후에는 추가로 ACG를 적용할 수 없습니다.`&quot; %}

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}


## Custom ACG 추가 적용-제거
Classic 환경과 달리 **VPC 환경에서는** ACG가 서버가 아닌 NIC에 적용되는 구조이며, `기존에 적용된 ACG외에 추가로 ACG를 적용하거나 제거할 수 있습니다`.

아래와 같이 서버 상세정보 NIC 항목에서 [ACG 수정] 버튼을 클릭합니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### ACG 추가 적용
ACG 수정 화면에서 왼쪽 창에서 적용하려는 ACG를 선택하고 오른쪽 창으로 이동시키면 됩니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### ACG 제거
ACG 수정 화면에서 오른쪽 창에서 제거하려는 ACG를 선택하고 왼쪽 창으로 이동시키면 됩니다.  

{% include callout_v2.html type=&quot;primary&quot; level=&quot;2&quot; content=&quot;이때 ACG는 최소 1개가 적용되어 있어야 하므로 마지막 ACG 1개는 제거할 수 없습니다.&quot; %}

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}


## 접근소스를 Load Balancer로 설정
ACG를 설정할 때 접근 소스 항목은 보통 IP주소를 입력하게 됩니다. 
하지만 특수한 경우로 Load Balancer를 지정하거나 ACG를 직접 지정하는 경우도 있습니다. 

먼저 로드밸런서를 생성하고 서버와 연결한 후에 서버측 ACG에 로드밸런서의 접근을 허용하는 방법에 대해 알아보겠습니다.  

### VPC 환경
VPC 환경에서 아래와 같이 로드밸런서의 서브넷 네트워크가 [**10.0.4.0/24**] 대역이라고 가정해보겠습니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}


서버의 ACG 규칙 설정 화면에서 아래와 같이 접근소스에 위에서 확인한 로드밸런서의 서브넷 네트워크 [**10.0.4.0/24**]를 입력하면 됩니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;
VPC 환경에서 로드밸런서와 서버를 연결할 때에는 ACG 설정 외에도 Network ACL 등 추가로 설정해야 하는 것들이 많이 있습니다. 자세한 설정 방법은 아래 문서를 참고하시기 바랍니다. &lt;br /&gt;
&amp;#8259; &lt;a href=&apos;/networking/ncloud_networking_load_balancer_application_lb.html&apos; target=&apos;_blank&apos; style=&apos;word-break:break-all&apos;&gt;VPC 환경에서 Application Load Balancer 생성하기&lt;/a&gt;
&quot; %}


### Classic 환경
Classic 환경에서는 아래와 같이 로드밸런서의 ACG 소스 명칭이 [**ncloud-load-balancer**]로 고정되어 있습니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

ACG 규칙 설정 화면에서 접근소스에 로드밸런서의 ACG 소스 [**ncloud-load-balancer**]를 입력하면 됩니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}


## 접근소스를 ACG로 설정
다음으로 다른 ACG를 접근소스로 지정하는 경우도 있습니다. 이것은 해당 ACG가 적용된 서버들이 접근할 수 있도록 규칙을 설정하는 것인데, 아래 설정 방법과 예시를 통해 자세히 알아보겠습니다.

### VPC 환경
ACG 규칙 설정에서 접근 소스 항목에 지정하려는 ACG 이름을 일부 입력하면 아래와 같이 적용 가능한 ACG 리스트가 나타는데 그 중에서 지정하려는 ACG를 선택하면 됩니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;VPC 환경에서 ACG를 접근소스를 설정할 때는 **동일한 VPC에 생성된 ACG만 접근소스로 설정**할 수 있습니다.&quot; %}

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### Classic 환경
Classic도 마찬가지로 ACG 규칙 설정에서 접근 소스 항목에 지정하려는 ACG 이름을 일부 입력하면 아래와 같이 적용 가능한 ACG 리스트가 나타는데 그 중에서 지정하려는 ACG를 선택하면 됩니다. Classic은 VPC와 달리 특별한 제한이 없습니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### 예시
아래와 같이 SVR-1, SVR-2, SVR-3 서버에 각각 ACG-1, ACG-2가 적용되어 있다고 가정해보겠습니다.

[**ACG-1**]
- 적용서버 : SVR-1, SVR-2

[**ACG-2**]
- 적용서버 : SVR-3

[**ACG-2 적용 규칙**]
- 프로토콜 :  TCP
- 접근소스 :  ACG-1
- 허용포트 : 80

{% include note.html content=&quot;위와 같은 경우 ACG-1이 적용된 SVR-1, SVR-2 서버에서 ACG-2가 적용된 SVR-3 서버로 80포트를 이용한 접근을 허용한다는 의미입니다.&quot; %}


## ACG 삭제
Custom ACG는 VPC, Classic 환경 모두 [Console] - [Server] - [ACG] 메뉴에서 삭제할 수 있습니다.

삭제하려는 ACG를 선택하고 [ACG 삭제] 버튼을 클릭합니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

ACG 삭제 팝업에서 [예] 버튼을 클릭합니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-15.png&quot; width=&quot;480&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### 삭제 불가
아직 적용된 서버나 NIC가 존재하는 ACG는 삭제할 수 없습니다.

#### VPC 환경
VPC 환경에서 삭제를 시도하면 [ACG에 속해 있는 Network Interface가 존재합니다. 해당 Network Interface에서 ACG를 삭제 후 다시 시도해주세요]라는 메시지가 나타납니다.
{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-16.png&quot; width=&quot;480&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

#### Classic 환경
Classic 환경에서 삭제를 시도하면 [서버가 한대라도 ACG 에 적용되어 있는 상태이면, 해당 ACG 는 삭제할 수 없습니다]라는 메시지가 나타납니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-17.png&quot; width=&quot;480&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}

### Default ACG 삭제 불가
기본적으로 생성된 Default ACG는 삭제할 수 없습니다.

{% include image.html file=&quot;security/ncloud-security-acg-setting-sample-18.png&quot; width=&quot;480&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 설정 예시&quot; caption=&quot;&quot; %}


## 참고 URL
1. VPC 환경 ACG 설정
- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/compute-compute-2-3-vpc&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/compute-compute-2-3-vpc&lt;/a&gt;


2. Classic 환경 ACG 설정
- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/compute-compute-2-3&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/compute-compute-2-3&lt;/a&gt;</description>
            <pubDate>Wed, 06 Jul 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/security/ncloud-security-acg-setting-sample.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/security/ncloud-security-acg-setting-sample.html</guid>
            
            <category>acg</category>
            
            <category>classic</category>
            
            <category>vpc</category>
            
            <category>load_balancer</category>
            
            
        </item>
        
        <item>
            <title>Ncloud 방화벽 ACG 설정 기본 가이드</title>
            <description>## 개요
ACG(Access Control Group)는 서버 간 네트워크 접근 제어 및 관리를 할 수 있는 IP/Port 기반 필터링 방화벽 서비스로 AWS에서는 비슷하게 Security Group이라는 것이 있습니다.

## 제한 사항

### VPC
- VPC당 최대 **500개**까지 ACG 생성 가능
- **NIC당 3개의 ACG**를 허용
- Inbound / Outbound 각각 **50개의 규칙** 생성 가능

### Classic
- 계정당 최대 **100개**까지 ACG를 생성 가능
- 각 ACG에는 최대 **100개**까지의 규칙을 설정할 수 있음
- 서버는 **최대 5개**의 ACG에 중복 포함될 수 있음
- 서버가 생성될 시 선택한 ACG는 변경이 불가하며, 반납 전까지 해당 ACG 규칙을 적용 받게 됨

{% include callout_v2.html type=&quot;info&quot; level=&quot;1&quot; content=&quot;Classic 환경에서는 서버 자체에 할당되는 개념이었으나 VPC에는 NIC 즉, 네트워크 카드에 할당되는 개념이어서 VPC 환경에서는 **NIC 당 최대 3개**까지 ACG를 적용할 수 있습니다.&quot; %}

## 기본 규칙

### Default ACG
기본적으로 추가되는 ACG

- 모든 들어오는 연결(inbound traffic)을 차단함
- 모든 나가는 연결(outbound traffic)을 허용함
- Default ACG 내 속한 서버들끼리의 네트워크 양방향 통신(TCP, UDP, ICMP)이 허용됨
- 원격 접속 기본 포트 (**Linux - 22, Windows - 3389**)에 대한 TCP 허용됨

#### VPC 화면

##### Inbound (기본 설정)
{% include image.html file=&quot;security/ncp_security_acg_vpc_inbound.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

{% include callout_v2.html type=&quot;warning&quot; level=&quot;1&quot; content=&quot;기본으로 생성된 ACG에는 위처럼 22, 3389 포트에 대해 0.0.0.0/0 즉, 전체 IP에 대해 허용되어 있는데 보안을 위해 이 항목을 삭제하고 아래와 같이 지정된 IP에서만 접속하도록 수정하는 것을 적극 권장합니다.&quot; %}

##### Inbound (권장 설정)
{% include image.html file=&quot;security/ncp_security_acg_vpc_inbound_02.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

##### Outbound
{% include image.html file=&quot;security/ncp_security_acg_vpc_outbound.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

#### Classic 화면 (기본 설정)
{% include image.html file=&quot;security/ncp_security_acg_classic.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

{% include callout_v2.html type=&quot;warning&quot; level=&quot;1&quot; content=&quot;기본으로 생성된 ACG에는 위처럼 22, 3389 포트에 대해 0.0.0.0/0 즉, 전체 IP에 대해 허용되어 있는데 보안을 위해 이 항목을 삭제하고 아래와 같이 지정된 IP에서만 접속하도록 수정하는 것을 적극 권장합니다.&quot; %}

#### Classic 화면 (권장 설정)
{% include image.html file=&quot;security/ncp_security_acg_classic_02.png&quot; width=&quot;770&quot; alt=&quot;Ncloud의 IP/Port 기반 필터링 방화벽 서비스 ACG(Access Control Group) 가이드&quot; caption=&quot;&quot; %}

### Custom ACG
Default ACG 이외에 사용자가 추가하는 ACG

- 모든 inbound traffic을 차단함(규칙으로 명시되어 있지 않음)
- 모든 outbound traffic을 허용함(규칙으로 명시되어 있지 않음)


## 접근소스 설정
ACG를 설정할 때 접근 소스 항목은 보통 IP주소를 입력하게 됩니다. 
하지만 특수한 경우로 Load Balancer를 지정하거나 ACG 이름을 지정하는 경우도 있습니다. 
이 중에서 다른 ACG를 접근 소스 항목으로 지정하는 경우는 해당 ACG가 적용된 서버들이 접근할 수 있도록 규칙을 설정하는 것인데, 아래 예시를 이용해 정리해보겠습니다.

### ACG-1
- 적용서버 : SVR-1, SVR-2

### ACG-2
- 적용서버 : SVR-3

### ACG-2 적용 규칙
- 프로토콜 :  TCP
- 접근소스 :  ACG-1
- 허용포트 : 80

{% include note.html content=&quot;위와 같은 경우 ACG-1이 적용된 SVR-1, SVR-2 서버에서 ACG-2가 적용된 SVR-3 서버로 80포트를 이용한 접근을 허용한다는 의미입니다.&quot; %}
{% include callout_v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;VPC 환경에서 ACG를 접근소스를 설정할 때는 동일한 VPC에 생성된 ACG만 접근소스로 설정할 수 있습니다.&quot; %}



## 참고 URL
&lt;a href=&quot;https://guide.ncloud-docs.com/docs/compute-compute-2-3&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/compute-compute-2-3.html&lt;/a&gt;
</description>
            <pubDate>Tue, 05 Jul 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/security/ncloud_security_acg_guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/security/ncloud_security_acg_guide.html</guid>
            
            <category>acg</category>
            
            <category>classic</category>
            
            <category>vpc</category>
            
            
        </item>
        
        <item>
            <title>VPC 환경에서 AutoScaling 설정하는 방법</title>
            <description>## 개요
Ncloud (네이버 클라우드) VPC 환경에서 AutoScaling 설정하는 방법을 정리해보겠습니다.  

AutoScaling 서비스는 미리 등록한 설정에 따라 서버 수를 자동으로 증가 또는 감소시켜 안정적인 서비스를 유지하면서 비용을 절감할 수 있도록 해주는 서비스입니다. 

그런데, 언제 서버 수를 증가, 감소 시킬 것인 가에 대한 이벤트 설정이 **Classic 환경의 경우 오토스케일 그룹에 속한 서버들의 평균값을 기준**으로 하지만, 
**VPC 환경의 경우 이 방법 말고도 특정 서버를 지정해서 해당 서버를 기준으로 이벤트 설정을 할 수도** 있습니다.

그래서 여기서는 사전에 준비된 서버를 기준으로 AutoScaling이 작동되는 것을 살펴보겠습니다.

## 기준 서버 생성
AutoScaling 이벤트 설정의 기준이 되는 서버 1대를 아래와 같이 미리 생성하겠습니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_16.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## 설정 순서
Auto Scaling 설정 순서를 요약하면 다음과 같습니다.

{% include callout_v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;
1. Auto Scaling Launch Configuration 설정 &lt;br /&gt;
2. Auto Scaling Group 설정 &lt;br /&gt;
3. Cloud Insight Monitoring Event Rule 설정 &lt;br /&gt;
&quot; %}

## Launch Configuration 설정
Auto Scaling 설정은 우선 [Auto Scaling] - [Launch Configuration]에서 [Launch Configuration 생성] 버튼을 클릭하는 것으로 시작합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 서버 이미지 선택
서버 이미지는 Ncloud (네이버 클라우드)에서 제공하는 기본 이미지를 선택할 수도 있고, 기존에 사용하던 서버로 만들어 둔 [내 서버 이미지]를 사용할 수도 있습니다. 여기서는 기본 이미지를 사용하는 것으로 하겠습니다.

{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;현재 AutoScaling에서 지원하는 Linux 서버 이미지 버전은 다음과 같습니다. &lt;br /&gt;
&amp;#8259; CentOS 7.3, 7.8 &lt;br /&gt;
&amp;#8259; Ubuntu 16.04, 18.04, 20.04
&quot; %}

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### Windows 서버 이미지 버전

{% include callout_v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;현재 AutoScaling에서 지원하는 Windows 서버 이미지 버전은 다음과 같습니다. &lt;br /&gt;
&amp;#8259; Windows Server 2016 64bit English Edition &lt;br /&gt;
&amp;#8259; Windows Server 2019 64bit English Edition
&quot; %}

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 서버 설정
스토리지 종류와 서버 타입 등을 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 이름 설정
Launch Configuration의 이름을 입력합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 인증키 설정
인증키는 기존에 보유하고 있던 인증키를 이용해도 되고, 새로운 인증키를 설정해도 됩니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 최종 확인
지금까지 설정한 내용이 이상 없는지 최종 확인을 하고 이상 없으면 [Launch Configuration 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## Auto Scaling Group 설정
다음으로 Auto Scaling Group을 생성합니다. [Auto Scaling] - [Auto Scaling Group]에서 [Auto Scaling Group 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### Launch Configuration 선택
위에서 생성했던 Launch Configuration을 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 그룹 설정
여기서는 VPC와 Subnet 등의 네트워크 환경을 선택하고,  생성될 서버들의 이름과 최소, 최대 개수 등을 설정합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

- **서버이름 Prefix** : 최대7자까지 지정할 수 있고, 나머지 이름의 뒷부분은 영문,숫자의 조합으로 무작위로 자동 생성됩니다.
- **서버 용량** : 최소, 최대, 기대 용량은 서버 대수를 의미하며 각각 **0~30까지 입력 가능**합니다.
- **쿨다운 기본값** : 새로운 서버가 생성되었다고 해도, init script 실행이나 업데이트 설치 등의 이유로 실제 서비스를 수행할 수 있을 정도로 준비되기까지는 시간이 소요될 수 있습니다. 
  즉, 쿨다운(Cooldown) 시간이란 실제 Scaling이 수행 중이거나 수행 완료된 이후에 모니터링 이벤트 알람이 발생하더라도 반응하지 않고 무시하도록 설정한 기간입니다.  
  **값을 입력하지 않으면 기본값인 300초가 적용됩니다**.

- **헬스체크 보류기간** : 서버 인스턴스가 생성되어 상태가 ‘운영 중’으로 바뀌었더라도, 서버의 업데이트 설치 등 작업에 의해서 헬스 체크에 정상 응답하지 못하는 경우가 생길 수 있습니다. 
  이런 경우 헬스 체크 보류 기간을 지정하면 해당 기간 동안에는 헬스 체크에 실패하더라도 서버에 이상이 있다고 판단하지 않습니다.  
  **값을 입력하지 않으면 기본값인 300초가 적용됩니다**.

&lt;br /&gt;

### 네트워크 접근 설정
네트워크 접근에 필요한 ACG를 설정하고 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_11.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 정책/일정 설정
정책과 일정을 여기서 바로 설정할 수도 있고 나중에 설정할 수도 있는데, 
우선은 [정책 설정]에서 [서버 수 증가 정책]과 [서버 수 감소 정책]을 설정합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_12.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 통보 설정
서버가 생성될 때 또는 서버가 반납될 때 언제 통보를 받을 것인지 선택하고, 누가 언제 통보 받을 것인지 설정합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_13.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 통보 대상 설정 
먼저 [통보대상 관리 그룹]을 선택하고, 다음으로 관리자와 통보 방법을 선택합니다.  
[통보대상 관리 그룹]이 설정되지 않았을 경우에는 [통보대상관리] 버튼을 클릭해 통보를 받을 대상의 그룹을 설정합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_14.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 최종 확인
지금까지 설정한 Auto Scaling Group 내역을 확인하고 이상이 없으면 [Auto Scaling Group 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_15.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## Event Rule 설정
지정한 서버를 모니터링 하다가 설정한 조건에 해당되면 즉, 지정한 Event가 발생하면 Auto Scaling 설정을 적용해 서버를 증가시키거나 감소시키기 위한 감시 규칙인 [Event Rule]을 설정합니다.  

### 서버 증가 Event Rule 생성
VPC에서는 [Cloud Insight]로 모니터링을 하게 되므로 Event Rule 설정도 [Cloud Insight(Monitoring)] - [Configuration] - [Event Rule]에서 [Event Rules 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_17.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 감시 상품 선택
Cloud Insight는 Server 뿐만 아니라 Load Balancer, Object Storage도 감시할 수 있는데 여기서는 처음에 생성했던 서버를 감시할 것이니 [Server(VPC)]를 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_18.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 감시 대상 설정
맨 처음에 생성했던 서버를 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_19.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 감시 항목 및 조건 설정
감시 항목 설정에서 [전체 보기]를 선택하고, [SERVER] 탭에서 [Metric ID]를 [cpu]로 검색한 후 평균 CPU 사용률 항목인 [SERVER/avg_cpu_used_rto]에서 [Level]과 [Condition], [Method], [Duration]을 선택합니다.

먼저 서버를 증가시키는 경우에 해당하는 감시 항목을 설정하겠습니다.  
아래의 설정 내용은 &quot;**평균 CPU 사용률이 1분간 50% 이상일 경우 경고 수준으로 이벤트 통보를 한다**&quot;라는 설정입니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_22.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 액션 설정
앞에서 설정한 이벤트가 발생했을 경우 어떤 액션을 취할 것인지 설정하게 되는데 앞에서 [Auto Scaling Group] 설정에서 생성했던 정책을 선택하면 됩니다.  
여기서는 [CPU 사용률 50% 이상]인 경우이므로 서버를 증가시키는 정책을 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_23.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 최종 확인
설정한 내용이 이상 없는지 최종 확인하고, 규칙 이름을 입력한 후에 [생성] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_24.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 서버 감소 Event Rule 생성
앞에서 생성한 [서버 증가 Event Rule]과 같은 방식으로 [서버 감소 Event Rule]을 생성합니다.  

아래의 설정 내용은 &quot;**평균 CPU 사용률이 1분간 10% 이하일 경우 정보 알림 수준으로 이벤트 통보를 한다**&quot;라는 설정입니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_25.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 액션 설정
여기서는 [CPU 사용률 10% 이하]인 경우이므로 서버를 감소시키는 정책을 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_26.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 최종 확인
설정한 내용이 이상 없는지 최종 확인하고, 규칙 이름을 입력한 후에 [생성] 버튼을 클릭합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_27.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### Event Rule 생성 완료
서버 증가과 감소에 대한 Event Rule 2가지가 모두 생성된 것을 확인할 수 있습니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_28.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## Stress Tool 설정
CPU 사용률에 따른 Auto Scaling 작동 여부를 테스트 하기 위해 서버에 Stress Tool을 설치해보겠습니다.

### EPEL 리포지토리 설정
Stress Tool을 설치하기 위해서는 다음 명령어로 [EPEL 리포지토리]를 설정해야 합니다.

``` bash
~# yum -y install epel-release
```
{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_29.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### Stress Tool 설치

``` bash
~# yum -y install stress
```
{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_30.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## Stress Tool 실행

### CPU 코어 개수 확인
CPU에 강제로 부하를 발생 시키기 위해서는 서버의 CPU 코어 개수를 확인해서 모든 코어에 부하를 발생시키는 것이 좋습니다.  
CPU 코어 개수를 확인하는 방법은 아래 명령어를 입력하면 됩니다.

``` bash
~# grep -c processor /proc/cpuinfo
```
{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_31.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 명령어 테스트
CPU에 부하를 주는 명령어를 테스트 해보겠습니다.

``` bash
~# stress --cpu 2 --timeout 60 --verbose
```

위 옵션의 내용은 다음과 같습니다.

- cpu: 몇 개의 코어에 부하를 발생 시킬 것인가
- timeout: 몇 초 동안 부하를 발생 시킬 것인가
- verbose: 상세 로그를 표시

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_32.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### CPU 부하 발생
부하 발생 테스트를 마쳤으니 실제 Auto Scaling 테스트를 위해 300초 즉, 5분 동안 부하를 발생 시켜보겠습니다.

``` bash
~# stress --cpu 2 --timeout 300 --verbose
```
{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_33.png&quot; width=&quot;840&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## 서버 증가 확인
Stress Tool로 부하를 발생 시키고 서버 리스트를 확인해보면 아래와 같이 Auto Scaling 설정에서 지정한 대로 서버가 생성되고 있는 것을 확인할 수 있습니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_34.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## CPU 사용률 확인
[Cloud Insight]에서 서버 사용률을 확인해 보면 아래와 같이 5분간 CPU 사용률이 100%까지 올라간 것을 확인할 수 있습니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_35.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## 서버 반납 확인
Stress Tool로 부하를 발생 시키도록 설정한 5분이 지난 후에 서버 리스트를 보면 Auto Scaling으로 생성되었던 서버가 반납되고 있는 것을 확인할 수 있습니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_36.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## 이벤트 발생 확인
[Cloud Insight] - [Event]에서 서버 증가, 감소 관련 이벤트가 제대로 발생했는지 아래와 같이 그래프와 리스트로 확인할 수 있습니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_37.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

## 이벤트 통보 확인
이벤트 통보에서 설정한 대로 아래와 같이 Email로 Auto Scaling 이벤트 발생과 완료에 대한 통보 메일이 도착한 것을 확인할 수 있습니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_38.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}



## 서비스 제한사항
Auto Scaling 설정과 서버 스펙 등에 대한 제한 사항을 정리해보겠습니다.

### 스펙 및 서비스 환경 제한 사항
- 총 디스크 사이즈 150GB 이하 서버만 가능
- Windows OS는 Windows 2016. 2019만 지원
- 내 서버 이미지의 경우, 원본 서버의 부팅 디스크 크기가 50GB인 경우만 지원(100GB 디스크에 대해서는 추후 지원 예정)

### 설정 제한 사항
- 고객별 생성 가능한 Auto Scaling Group 최대 수: 10
- 고객별 생성 가능한 Launch Configuration 최대 수: 100
- Auto Scaling Group당 생성 가능한 스케줄(Scheduled Action) 최대 수: 100
- Auto Scaling Group당 생성 가능한 Scaling Policy 최대 수: 10
- Auto Scaling Group당 생성 가능한 최대 서버 수: 30대
- Auto Scaling Group당 연결 가능한 Load Balancer 최대 수 : 10


## 상세 모니터링
Ncloud (네이버 클라우드)에서는 기본 모니터링 외에 [상세 모니터링]도 지원하는데, [상세 모니터링]에서는 좀 더 자세하고 다양한 모니터링 항목 (Extended Metric)을 지원합니다.  

예를 들어 CPU 사용과 관련한 모니터링 항목에서도 아래와 같이 [CPU idle ratio average] 항목들도 확인할 수 있습니다.
{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_39.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

또한, 위와 같이 [Server] 탭에서는 CPU들의 평균 값을 모니터링할 수 있는 것에 비해, 상세 모니터링을 적용하면 아래와 같이 [CPU] 탭에서 CPU 코어별로 각각 모니터링을 할 수도 있습니다.
{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_40.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

### 상세 모니터링 설정
상세 모니터링을 적용하는 방법은 서버를 선택하고 [서버 관리 및 설정 변경] 메뉴에서 [상세 모니터링 설정 변경] 메뉴를 선택합니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_20.png&quot; width=&quot;845&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}

#### 상세 모니터링 신청
상세 모니터링 신청 팝업에서 [예] 버튼을 클릭하면 상세 모니터링이 적용됩니다. 상세 모니터링 신청 후 실제 데이터가 수집되기까지는 약간의 시간이 소요되므로 잠시 기다렸다 확인해보면 됩니다.

{% include image.html file=&quot;compute/autoscaling/ncloud_server_autoscaling_guide_vpc_21.png&quot; width=&quot;480&quot; alt=&quot;Ncloud VPC 환경에서 AutoScaling 설정하는 방법&quot; caption=&quot;&quot; %}


## 용어 정리
Auto Scaling에서 사용되는 주요 용어들을 정리해보겠습니다.

| 용어 | | 설명|
| :----: | :----: | :---- |
| Scale-in / Scale-out | | Auto Scaling Group을 생성하여 고객이 설정한 Policy에 따라 사용하고 있는 가상 서버의 자동 확장(Scale-out) 및 자동 축소(Scale-in)하도록 제공합니다. |
| Auto Scaling Group | | 여러 개의 서버 인스턴스들을 Auto Scaling Group 이라는 하나의 그룹으로 묶어 놓게 됩니다. |
| Launch Configuration | | Auto Scaling Group에서 가상 서버를 시작 구성하는 데 사용하는 템플릿입니다. Auto Scaling Group을 생성할 때는 Launch Configuration을 지정해야 합니다. |
| Auto Scaling Group의 최소 용량/최대 용량 | | Auto Scaling Group의 최소/최대 서버 수를 말합니다. 최소 서버 수의 경우, 항상 이 값과 같거나 이 값보다 더 큰 서버 수가 유지됩니다. 서버를 한 대도 보유하지 않을 수 있게 하려면 0으로 설정합니다. |
| 기대 용량 (Desired Capacity) | | 서버의 수는 기대 용량값에 따라서 조정됩니다. 이 값은 최소 용량 이상, 최대 용량 이하여야 합니다. 이 값이 지정되어 있지 않으면 초기에 최소 용량만큼 서버를 생성합니다. |
| 쿨다운 기본값(초) (Default Cooldown) | | Default Cooldown(초) 새로운 서버가 생성되었다고 해도, Init-Script 실행이나 업데이트 설치 등의 이유로 실제 서비스를 수행할 수 있을 정도로 준비되기까지는 시간이 소요될 수 있습니다. 쿨다운(Cooldown) 시간이란 실제 Scaling이 수행 중이거나 수행 완료된 이후에 모니터링 이벤트 알람이 발생하더라도 무시하도록 설정한 기간입니다. |
| 헬스체크 | | Auto Scaling Group의 가상 서버에 주기적인 상태 확인을 수행하여 상태가 비정상인 가상 서버를 식별하도록 Health Check를 합니다. |
| 헬스체크 보류 기간 | |	서버가 생성되어 ‘운영중’으로 변경되었더라도 서버의 업데이트 설치 등 작업에 의해서 헬스 체크에 정상 응답하지 못하는 경우가 생길 수 있습니다. 이런 경우 헬스 체크 보류기간을 지정하면 해당 기간 동안에는 헬스 체크에 실패하더라도 서버 헬스에 이상이 있다고 판단하지 않습니다. |
| 헬스체크 유형 | | 서버와 Load Balancer 둘 중에 선택할 수 있습니다. Auto Scaling Group 설정에서 Load Balancer 이름을 지정한 경우에는 헬스 체크 유형 역시 Load Balancer로 설정합니다. 이런 경우 Auto Scaling은 Load Balancer 헬스 체크 방식과 기준에 따라 서버의 상태를 판단합니다. |
| 반납 정책 | | Auto Scaling 과정에서 추가된 서버에 대한 Scale-in 작업에 대해, 고객이 API 질의 형식으로먼저 반납할 서버를 지정할 수 있습니다. 기본 설정은 먼저 생성된 서버부터 반납합니다. |
| Policy | | Auto Scaling이 일어나는 방식을 정의하고 있는데, 이를 ‘Policy’로 정의하고 있습니다. Auto Scale-out 이 발생할 때, 몇 대의 가상 서버를 늘릴 것인지, 반대로 Scale-in이 발생할 때 몇 대의 가상서버를 줄일 것인지를 정의합니다. 대수로 정의할 수 도 있고, %로 정의할 수도 있습니다. |
| Basic Metric | | 기본적으로 제공되는 모니터링 항목 |
| Extended Metric | | 상세모니터링을 신청하면 제공되는 모니터링 항목 |

## 참고 URL
1.  Ncloud Auto Scaling 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/compute-autoscaling-autoscalingoverview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/compute-autoscaling-autoscalingoverview&lt;/a&gt;

2. Classic 환경에서 Auto Scaling 설정하기
    - &lt;a href=&quot;/compute/ncloud_compute_autoscaling_classic_guide.html&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://docs.3rdeyesys.com/compute/ncloud_compute_autoscaling_classic_guide.html&lt;/a&gt;

2. Cloud Insight Basic/Extended Metric 정리
    - &lt;a href=&quot;https://api.ncloud-docs.com/docs/management-cloudinsight-productinfo&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://api.ncloud-docs.com/docs/management-cloudinsight-productinfo&lt;/a&gt;    
</description>
            <pubDate>Mon, 20 Jun 2022 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/compute/ncloud-compute-autoscaling-vpc-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/compute/ncloud-compute-autoscaling-vpc-guide.html</guid>
            
            <category>autoscaling</category>
            
            <category>vpc</category>
            
            
        </item>
        
    </channel>
</rss>
