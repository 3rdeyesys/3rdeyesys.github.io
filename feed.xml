<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>3RDEYESYSTEM Technical Documentations</title>
        <description>써드아이시스템(3rdeyesys) 기술문서 사이트입니다 - Ncloud 프리미엄 파트너</description>
        <link>https://docs.3rdeyesys.com/</link>
        <atom:link href="https://docs.3rdeyesys.com/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 16 Nov 2023 10:50:16 +0900</pubDate>
        <lastBuildDate>Thu, 16 Nov 2023 10:50:16 +0900</lastBuildDate>
        <generator>Jekyll v4.2.2</generator>
        
        
        <item>
            <title>Cloud Log Analytics에서 Windows IIS Log 수집하는 방법</title>
            <description>## 개요
Ncloud(네이버 클라우드) Cloud Log Analytics 서비스에서 Windows 웹서버인 IIS 로그를 수집하는 방법에 대해 정리해보겠습니다.

## 테스트 서버
- Windows Server 2019 (64-bit) English Edition

## 수집 설정
- [**Cloud Log Analytics**] - [**Management**]에서 서버를 선택하고 [**수집 설정**] 버튼을 클릭합니다.

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-02.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}

[**Log 수집 설정**] 화면에서 각 설정 항목을 다음과 같이 입력합니다.
- **Log Template**: **Custom Log**를 선택합니다.
- **Log Type**: 임의의 값을 입력합니다. (예: iislog)
- **Log 경로**: 실제 저장되는 로그파일의 경로를 입력합니다.

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-10.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}


### Log 파일 경로 확인
IIS Log 파일의 경로는 [**IIS Manager**]를 실행하고, 사이트 정보에서 [**Logging**] 메뉴를 선택하면 아래와 같이 [**Directory**] 항목을 확인할 수 있습니다.

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-03.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}

해당 경로를 찾아가면 아래와 같이 로그 파일이 저장되어 있는 것을 확인할 수 있습니다. 

```text
# 예시
C:\inetpub\logs\LogFiles\W3SVC1\u_ex231114.log
```
{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-04.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}

### Log 파일 경로 입력
실제 Log 파일은 일별 또는 시간 별로 파일명이 다르게 저장되는 경우가 대부분이므로 [**Log 경로**]에는 다음과 같이 전체 파일을 수집하도록 입력하면 됩니다. 이제 모든 항목을 입력했으면 [**추가**] 버튼을 클릭합니다.

```text
# 예시
C:\inetpub\logs\LogFiles\W3SVC1\*.log
```

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-05.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}

그리고, 입력한 내용에 이상이 없으면 [**적용**] 버튼을 클릭합니다.

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}

## 로그 수집 Agent 설치
로그 수집 설정을 마치면 [**로그 수집 Agent 설치**] 방법에 대한 안내 팝업이 나타납니다. 설치 안내 내용 중에서 [**로그 수집 agent 설치 명령어**] 항목에 있는 [**클립보드에 복사하기**] 버튼을 클릭해서 설치 명령어를 복사합니다.

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}

서버의 [**Windows PowerShell**]을 실행시켜서 위에서 복사한 [**로그 수집 agent 설치 명령어**] 입력합니다. 설치가 정상적으로 완료되면 [**Finish Installation**] 이라는 메시지를 확인할 수 있습니다.

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}

## 수집된 로그 확인
설치 후 5분 정도 기다렸다 [**Cloud Log Analytics**] - [**Search**] 메뉴에 들어가보면 아래와 같이 수집된 로그를 확인할 수 있습니다.

{% include image.html file=&quot;management/ncloud-management-cloud-Log-analytics-guide-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Cloud Log Analytics에서 Windows IIS Log 수집하는 방법&quot; caption=&quot;&quot; %}


## 참고 URL
&lt;a href=&quot;https://guide.ncloud-docs.com/docs/cla-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/cla-overview&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  </description>
            <pubDate>Thu, 16 Nov 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/management/ncloud-management-cloud-Log-analytics-windows-IIS-Log-collection-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/management/ncloud-management-cloud-Log-analytics-windows-IIS-Log-collection-guide.html</guid>
            
            <category>Log</category>
            
            <category>analytics</category>
            
            <category>windows</category>
            
            
        </item>
        
        <item>
            <title>Cloud Log Analytics에서 수집하는 로그 유형</title>
            <description>## 개요
Cloud Log Analytics는 네이버 클라우드 플랫폼의 여러 서비스에서 발생하는 다양한 로그들을 한 곳에 모아 저장하고 손쉽게 분석하게 해주는 서비스입니다.

## 로그 템플릿 종류
Cloud Log Analytics에서 수집하는 각 종 서비스의 로그 템플릿 종류는 다음과 같습니다.

- Server SYSLOG
- Apache 로그(Access log, Apache Error Log)
- MySQL 설치형 상품의 로그(Error Log, Slow Log)
- Microsoft SQL Server 설치형 상품의 Error Log
- Tomcat 로그(Catalina Log)
- Windows 서버의 Event Log
- Windows 서버의 각종 text 형식의 로그
- Cloud DB for MySQL 로그
- Cloud DB for MSSQL 로그
- Cloud DB for MongoDB 로그
- Cloud DB for PostgreSQL 로그
- Application Server Launcher 로그
- Application Load Balancer 로그
- Search Engine Service 로그
- Cloud Data Streaming Service 로그
- Bare Metal Server 로그
- Kubernetes Service Audit 로그
- 그외 템플릿으로 제공되지 않는 로그도 Custom Log 기능으로 직접 대상 로그를 지정해서 수집할 수 있습니다


## 로그 보관 기간
로그 데이터의 **보관 기간은 30일**로, 30일이 지난 데이터는 자동 삭제되며, 사전에 별도로 통지하지 않습니다.


## 참고 URL
&lt;a href=&quot;https://guide.ncloud-docs.com/docs/cla-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/cla-overview&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  </description>
            <pubDate>Tue, 14 Nov 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/management/ncloud-management-cloud-log-analytics-template-info.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/management/ncloud-management-cloud-log-analytics-template-info.html</guid>
            
            <category>log</category>
            
            <category>analytics</category>
            
            
        </item>
        
        <item>
            <title>Cloud Log Analytics 설정 가이드</title>
            <description>## 개요
Cloud Log Analytics는 Ncloud(네이버 클라우드)가 제공하는 여러 서비스에서 발생하는 다양한 로그들을 한 곳에 모아 저장하고 손쉽게 분석할 수 있는 서비스로, 
검색 기능을 이용해 여러 종류의 로그를 한 곳에서 한번에 조회하고 분석할 수 있어 효과적인 로그 관리가 가능합니다. 

## 로그 템플릿 종류
Cloud Log Analytics는 텍스트 형식으로 생성되는 모든 종류의 로그 데이터 파일을 수집할 수 있는데, 사전에 제공되는 로그 템플릿 종류는 다음과 같습니다.

- Server SYSLOG
- Apache 로그(Access log, Apache Error Log)
- MySQL 설치형 상품의 로그(Error Log, Slow Log)
- Microsoft SQL Server 설치형 상품의 Error Log
- Tomcat 로그(Catalina Log)
- Windows 서버의 Event Log
- Windows 서버의 각종 text 형식의 로그
- Cloud DB for MySQL 로그
- Cloud DB for MSSQL 로그
- Cloud DB for MongoDB 로그
- Cloud DB for PostgreSQL 로그
- Application Server Launcher 로그
- Application Load Balancer 로그
- Search Engine Service 로그
- Cloud Data Streaming Service 로그
- Bare Metal Server 로그
- Kubernetes Service Audit 로그
- 그외 템플릿으로 제공되지 않는 로그도 Custom Log 기능으로 직접 대상 로그를 지정해서 수집할 수 있습니다

## 저장 용량
- **최대 100GB**까지 저장할 수 있습니다.
- 100GB 용량을 초과했을 경우 추가 저장 용량 확보를 위해 과거부터 전날까지의 데이터가 삭제될 수 있습니다.
- CLA로 수집되는 로그량이 하루 10GB 이상을 넘거나 천만 건 이상일 경우 저장된 로그 검색시 성능에 제한이 발생할 수 있습니다.
- 저장 용량과 저장 기간을 더 늘리길 원할 경우 고객지원으로 문의해야 합니다.
- 과거 데이터를 보관하려면 [자동 보내기] 기능을 이용하여 과거 데이터를 Object Storage로 백업할 수 있습니다.

## 로그 보관 기간
- Cloud Log Analytics 서비스는 **최대 30일** 동안 데이터가 보관되며, 검색 및 대시보드에서 확인할 수 있습니다.
- 30일이 지난 데이터는 과거 데이터부터 순차적으로 삭제됩니다.
- 30일이 지나지 않았더라도 저장된 데이터가 100GB를 초과하면 과거부터 전날까지의 데이터가 매일 삭제될 수 있습니다.

## 이용신청
Ncloud(네이버 클라우드) 콘솔 [Cloud Log Analytics] - [Subscription]에서 [이용 신청] 버튼을 클릭합니다. 
Cloud Log Analytics는 Classic, VPC 환경 공통 서비스이므로 어느쪽 환경에서 이용신청을 해도 상관없습니다.

{% include image.html file=&quot;management/ncloud-management-cloud-log-analytics-guide-01.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}


## 설정 - Linux
먼저 Linux 서버에서 설정하는 방법을 알아보겠습니다.  
[Cloud Log Analytics] - [Management]에서 로그를 수집할 서버를 선택하고, [수집 설정] 버튼을 클릭합니다.  

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_02.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

Log 수집 설정 화면에서 수집할 로그 템플릿을 선택하거나, 직접 [Custom Log]를 선택해서 로그 형태를 설정한 후에 [적용] 버튼을 클릭합니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_03.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

### 로그 수집 Agent 설치
Log 수집 설정을 마치면 [로그 수집 Agent] 설치 안내가 나옵니다.  
로그 수집 Agent 설치 명령어에는 URL 뒤쪽에 설치 하려는 서버에 해당하는 **설치키(Install Key)**가 포함되어 있습니다. 그러므로 URL을 수정해서도 안되고 다른 서버에 사용할 수도 없습니다.

``` bash
# VPC 환경
~# curl -s http://cm.vcla.ncloud.com/setUpClaVPC/{설치키(Install Key)} | sudo sh

# Classic 환경
~# curl -s http://cm.cla.ncloud.com/setUpCla/{설치키(Install Key)} | sudo sh
```

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_04.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

서버에 실제로 설치해보면 아래와 같이 설치 과정이 진행되고,  
설치가 완료되면 마지막에 **Finish Installation**이라는 메시지가 출력됩니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_06.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

설치된 Agent가 제대로 작동하고 있는지 확인해보면 아래와 같이 active (running) 상태인 것을 확인할 수 있습니다.
``` bash
~# systemctl status filebeat
```
{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_07.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

## 설정 - Windows
다음으로 Windows 서버에서 설정하는 방법을 살펴보겠습니다.  
마찬가지로 서버를 선택하고 [수집 설정] 버튼을 클릭합니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_11.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

로그 수집 설정에서 Log Template은 [EventLog]를 선택합니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_12.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

설정을 마치면 Agent 설치 가이드를 확인할 수 있습니다.  
서버에서 [Windows PowerShell]을 열고, 아래 명령어를 실행합니다. 마찬가지로 마지막에는 설치 서버에 해당하는 **설치키**가 포함되어 있습니다.

``` bash
# VPC 환경
Invoke-Expression $((New-Object System.Net.WebClient).DownloadString(&quot;http://cm.vcla.ncloud.com/setUpwinClaVPC/{설치키(Install Key)}&quot;))

# Classic 환경
Invoke-Expression $((New-Object System.Net.WebClient).DownloadString(&quot;http://cm.cla.ncloud.com/setUpwinClaVPC/{설치키(Install Key)}&quot;))
```
{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_13.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

설치가 완료되면 마지막에 **Finish Installation**이라는 메시지가 출력됩니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_14.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

## 로그 확인
Agent 설치 후 [Dashboard]를 확인해보면 로그가 수집되고 있을 것을 알 수 있습니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_08.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

[Search] 메뉴에서는 로그 내용을 자세히 검색, 확인할 수 있고, 굳이 서버에 접속하지 않더라도 필요한 로그를 콘솔 화면에서 직접 확인할 수 있습니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_09.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

## 로그 백업
Cloud Log Analytics는 수집된 로그를 Object Storage로 내보내기하거나 Excel 파일로 다운로드 해서 백업할 수 있는 기능을 지원합니다.

### 수동 백업
[Search] 메뉴에 [Object Storage로 내보내기]와 [X 다운로드] 버튼이 있습니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_24.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

[Object Storage로 내보내기] 버튼을 클릭하면 내보내기 할 버킷을 선택할 수 있습니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_25.png&quot; width=&quot;600&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

### 자동 백업
[Export Log] 메뉴에서 [자동 내보내기 설정]을 클릭합니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_16.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

설정 화면에서 내보내기를 할 Object Storage의 버킷을 선택합니다. 혹시 버킷이 생성되지 않았다면 Object Storage로 가서 먼저 버킷을 생성하고 와야 합니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_17.png&quot; width=&quot;700&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

내보내기는 하루에 한번 진행되므로 설정 후 다음 날 Object Storage에서 아래와 같이 파일이 저장되어 있는 것을 확인할 수 있습니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_20.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}


## 로그 수집 해제
더 이상 로그를 수집할 필요가 없어지면, 로그 수집 설정을 해제하면 됩니다.  

### Linux 서버 로그 수집 해제
서버를 선택하고 [수집 해제] 버튼을 클릭합니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_22.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}
로그 수집 해제를 위한 가이드에서 로그 수집 Agent 삭제 명령어를 복사합니다.

``` bash
# VPC 환경
~# curl -s http://cm.vcla.ncloud.com/removeCla | sudo sh

# Classic 환경
~# curl -s http://cm.cla.ncloud.com/removeCla | sudo sh
```
{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_05.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

Agent 삭제 명령어를 실행하면 아래와 같이 **Success Remove Agent** 메시지가 출력됩니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_10.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}


### Windows 서버 로그 수집 해제
마찬가지로 서버를 선택하고 [수집 해제] 버튼을 클릭합니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_22.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

로그 수집 해제를 위한 가이드에서 로그 수집 Agent 삭제 명령어를 복사합니다.

``` bash
# VPC 환경
Invoke-Expression $((New-Object System.Net.WebClient).DownloadString(&quot;http://cm.vcla.ncloud.com/removewinCla&quot;))

# Classic 환경
Invoke-Expression $((New-Object System.Net.WebClient).DownloadString(&quot;http://cm.cla.ncloud.com/removewinCla&quot;))
```
{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_18.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

Agent 삭제 명령어를 실행하면 아래와 같이 **Remove Agent** 메시지가 출력됩니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_19.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}


### Windows 서버 Agent 삭제 오류 상황
Windows 서버에서 Agent 삭제를 시도할 때 아래와 같이 오류 메시지가 발생하는 경우가 있습니다.  
이때는 당황하지 마시고, Agent 삭제 명령어를 다시 한번 실행하면 됩니다.

{% include warning.html title=&quot;Stop-Service&quot; content=&quot;Cannot find any service with service name &apos;filebeat&apos;.&quot; %}
{% include callout_v2.html type=&quot;info&quot; level=&quot;1&quot; content=&quot;로그 수집 설정에서 EventLog만 선택했을 경우 발생합니다.&quot; %}

로그 수집 Agent는 윈도 이벤트 로그 수집을 위한 winlogbeat와 그 외 로그를 수집하기 위한 filebeat 두가지가 설치되는데, EventLog만 수집하도록 설정할 경우 filebeat는 실행되지 않습니다. 
그 상태에서 Agent를 삭제하려고 하면 실행중이 아닌 filebeat를 실행 중지 시키려고 시도하게 되고, 결국 오류가 발생합니다.  

그러므로 심각한 오류는 아니고 만약을 위해 Agent 삭제 명령어를 한번 더 실행시키는 것으로 문제는 해결됩니다.

{% include image.html file=&quot;analytics/ncloud_analytics_cloud_log_analytics_guide_21.png&quot; width=&quot;770&quot; alt=&quot;Ncloud(네이버 클라우드) 로그 분석 서비스인 Cloud Log Analytics를 생성하고 설정하는 방법&quot; caption=&quot;&quot; %}

## 참고 URL
1.  Cloud Log Analytics 사용 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/cla-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/cla-overview&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  </description>
            <pubDate>Tue, 14 Nov 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/management/ncloud-management-cloud-log-analytics-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/management/ncloud-management-cloud-log-analytics-guide.html</guid>
            
            <category>log</category>
            
            <category>analytics</category>
            
            
        </item>
        
        <item>
            <title>Object Storage 접속용 Windows Client Tool - S3 Browser</title>
            <description>## 개요
네이버 클라우드의 Object Storage에 접속, 관리하는 방법은 aws cli 등 여러가지 있지만 Windows PC에서 간편하게 접속해서 관리할 수 있는 클라이언트 툴이 몇개 있습니다.  
그 중에서 이번에는 S3 Browser의 사용법에 대해 간단히 정리해보겠습니다.

## S3 Browser
S3 Browser는 Amazon S3 and Amazon CloudFront를 위한 클라이언트입니다
이 버전은 무료버전이기는 하지만, 정확히는 **personal use only**, **non-commecial use only**라고 명시되어 있습니다.  
그래서 라이선스와 관계없이 사용 가능하고, 더 많은 기능이 포함된 유료 버전도 있습니다. 

상세한 정보와 다운로드는 아래 링크에서 확인하시면 됩니다.

&lt;a href=&quot;https://s3browser.com/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://s3browser.com/&lt;/a&gt;


## 사용법

프로그램을 다운 받아서 설치하고, 실행을 하면 여러 종류의 스토리지 중에서 원하는 것을 선택하게 됩니다.  
이 클라이언트는 AWS S3를 위한 것으로 CloudBerry Explorer와는 다르게 AWS의 다양한 S3 서비스들만 접속이 가능한데, 이용 가능한 스토리지 리스트는 마지막에서 정리해보겠습니다. 

{% include image.html file=&quot;storage/ncp_storage_object_storage_s3_client_s3browser_01.jpg&quot; width=&quot;850&quot; alt=&quot;Ncloud Object Storage 접속용 Windows Client Tool - S3 Browser 사용 방법&quot; caption=&quot;&quot; %}


Account Type은  **S3 Compatible Storage**를 선택하면 됩니다.  
- Account name: 여기는 알아보기 쉬운 이름을 적으면 됩니다. 예를 들어 Naver Cloud
- REST Endpoint: 여기는 네이버 클라우드의 endpoint-url을 적습니다. **kr.object.ncloudstorage.com**
- Access Key ID: 여기는 Access Key ID
- Secret Access Key: 여기는 Secret Key

{% include image.html file=&quot;storage/ncp_storage_object_storage_s3_client_s3browser_02.jpg&quot; width=&quot;718&quot; alt=&quot;Ncloud Object Storage 접속용 Windows Client Tool - S3 Browser 사용 방법&quot; caption=&quot;&quot; %}

{% include callout_v2.html type=&quot;success&quot; level=&quot;1&quot; content=&quot;네이버 클라우드 포탈 -&gt; 마이페이지 -&gt; 계정관리 -&gt; 인증키 관리 - API 인증키 관리 메뉴에서 Access Key ID와 Secret Key를 가져오셔야 하며, 아직 만들어진 Key가 없다면 새로 만드셔야 합니다.&quot; %}


계정 정보를 입력하고 접속을 하면 버킷 리스트가 나타나고 원하는 버킷을 선택해서 들어가면 다음처럼 파일들을 확인할 수 있습니다.

{% include image.html file=&quot;storage/ncp_storage_object_storage_s3_client_s3browser_03.jpg&quot; width=&quot;850&quot; alt=&quot;Ncloud Object Storage 접속용 Windows Client Tool - S3 Browser 사용 방법&quot; caption=&quot;&quot; %}


Object Storage에 있는 파일을 로컬PC로 가져오려면 원하는 파일을 선택하고 마우스 오른쪽 버튼을 눌러서 **Download** 명령을 선택하면 됩니다.

{% include image.html file=&quot;storage/ncp_storage_object_storage_s3_client_s3browser_04.jpg&quot; width=&quot;850&quot; alt=&quot;Ncloud Object Storage 접속용 Windows Client Tool - S3 Browser 사용 방법&quot; caption=&quot;&quot; %}


그 외 여러 가지 기능들이 있는데 그리 어려운 기능은 아니므로 직접 사용해보시면 금방 알 수 있습니다.

마지막으로 S3 Browser로 접속 가능한 S3 리스트를 확인해보겠습니다.

{% include image.html file=&quot;storage/ncp_storage_object_storage_s3_client_s3browser_05.jpg&quot; width=&quot;717&quot; alt=&quot;Ncloud Object Storage 접속용 Windows Client Tool - S3 Browser 사용 방법&quot; caption=&quot;&quot; %}

- Amazon S3 Storage
- S3 Compatible Storage
- Amazon S3 in China
- Amazon S3 GovCloud Storage
- Amazon S3 GovCloud Storage (FIPS 140-2)
- Amazon S3 via EC2 IAM Role
- Amazon S3 via AssumeRole
- Amazon S3 (Credentials from Environment Variables)
- Amazon S3 (Credentials from AWS Config or Credential file)


## 업로드하는 파일 권한 자동 적용
S3 Browser를 이용해 파일을 업로드할 때 업로드하는 파일의 권한을 자동으로 적용하는 방법에 대해 살펴보겠습니다.

우선 S3 Browser에서 [**Tools**] - [**Option**] 메뉴를 클릭합니다.

{% include image.html file=&quot;storage/ncp_storage_object_storage_s3_client_s3browser_06.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Object Storage 접속용 Windows Client Tool - S3 Browser 사용 방법&quot; caption=&quot;&quot; %}

- [**Option**] 메뉴에 보면 여러 옵션들이 있는데 아래 스샷에서 표시한 2가지 옵션이 중요합니다. 각각에 대한 설명은 아래쪽에서 다시 정리해보겠습니다.
{% include image.html file=&quot;storage/ncp_storage_object_storage_s3_client_s3browser_07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud Object Storage 접속용 Windows Client Tool - S3 Browser 사용 방법&quot; caption=&quot;&quot; %}

### 버킷(Bucket) 권한 상속
[**Inherit permissions from parent bucket**] 옵션은 버킷(Bucket)에 업로드 되는 파일들은 버킷(Bucket)의 권한을 상속 받게 하는 옵션입니다.  
예를 들어 버킷(Bucket)의 권한이 [**All User**]에게 [**Read**] 권한이라면 이 옵션을 선택해두면 이 버킷(Bucket)에 업로드 되는 모든 파일은 [**All User**]에게 [**Read**] 권한을 가지게 됩니다.

### 권한 유지
[**Preserve permissions when overwriting existing files**] 옵션은 이미 버킷(Bucket)에 존재하는 파일을 다시 업로드 해서 덮어 쓰기를 할 경우 기존의 권한을 유지하도록 하는 옵션입니다.


## 참고 URL
1.  S3 Browser 홈페이지
	- &lt;a href=&quot;https://s3browser.com/&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://s3browser.com/&lt;/a&gt;

2.  S3 Browser S3-Compatible Storages 설정 가이드
	- &lt;a href=&quot;https://s3browser.com/s3-compatible-storage.aspx&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://s3browser.com/s3-compatible-storage.aspx&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}</description>
            <pubDate>Mon, 06 Nov 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/storage/ncloud_storage_object_storage_s3_client_s3browser.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/storage/ncloud_storage_object_storage_s3_client_s3browser.html</guid>
            
            <category>object_storage</category>
            
            <category>backup</category>
            
            
        </item>
        
        <item>
            <title>VPC Peering 생성 가이드</title>
            <description>## 개요
VPC(virtual Private Cloud)는 퍼블릭클라우드상에서 제공되는 사설 가상 네트워크 입니다. 계정당 3개의 VPC를 만들수 있으며 다른 VPC 네트워크와 논리적으로 분리되어 있어 독립적인 네트워크 환경을 구현할 수 있습니다.  
그런데, 간혹 VPC 환경에서 분리되어 있는 VPC간의 통신이 필요할때가 있는데 이때 사용할 수 있는 서비스가 [**VPC Peering**] 입니다. 

VPC Peering은 공인 아이피를 거치지 않고 Ncloud 내부 네트워크를 이용하여 VPN없이 VPC간 통신을 할수 있게 해주는 서비스 입니다.

## VPC 생성
우선 테스트에 사용할 VPC로 [test-vpc], [test2-vpc] 이렇게 2개를 준비했습니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_01.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

## Subnet 생성 

이제 각 VPC에 서브넷을 생성합니다. [test-vpc]에는 [test-subnet(192.168.10.0/24)]으로 생성합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_07.png&quot; width=&quot;700&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

[test2-vpc]에는 [test2-subnet(172.16.10.0/24)]으로 생성합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_08.png&quot; width=&quot;700&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

생성된 Subnet은 다음과 같습니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_09.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}


## VPC Peering 생성
네이버 클라우드(Ncloud) 콘솔에서 [Networking] -&gt; [VPC] -&gt; [VPCPeering] 메뉴로 이동해서 [VPC peerig 생성] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_02.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

- ① 이름을 적고
- ② 요청 VPC는 [testVPC]를 선택
- ③ 수락 VPC는 [내계정], [test2VPC]를 선택

설정이 끝났으면 생성버튼을 클릭합니다.

{% include callout_v2.html type=&quot;success&quot; level=&quot;1&quot; content=&quot;다른 계정의 VPC와 연결하는 경우는 아래쪽에서 살펴보겠습니다.&quot; %}

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_03.png&quot; width=&quot;700&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

마지막으로 VPC Peering 요청 내용을 확인하고 [확인] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_17.png&quot; width=&quot;500&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

[test-vpc] -&gt; [test2-vpc]로 설정된 VPC Peering을 아래와 같이 확인할 수 있습니다.  

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_04.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

### 역방향 설정 추가
그런데 VPC peering은 단방향 통신이기에 TCP, ICMP 등의 양방향 통신을 하는 프로토콜을 이용하려면 역방향 즉, [test2-vpc] -&gt; [test-vpc]로 설정된 VPC Peering도 추가해야 합니다.

- ① 이름을 적고
- ② 요청 VPC에는 test2VPC를 선택
- ③ 수락 VPC에는 testVPC를 선택

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_05.png&quot; width=&quot;700&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

VPC Peering 요청 내용을 확인하고 [확인] 버튼을 클릭합니다. 

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_18.png&quot; width=&quot;500&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

아래와 같이 [test-vpc] -&gt; [test2-vpc] , [test2-vpc] -&gt; [test-vpc] 2가지 VPC Peering을 모두 생성했으므로 양방향 통신이 가능하게 되었습니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_06.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}


## Route Table 설정

이제 통신할 서브넷 혹은 서버의 아이피를 Route Table 설정에 추가 합니다. 여기서는 서브넷을 추가하도록 하겠습니다.

우선 [VPC] - [Route Table]에서, [test-vpc-default-public-table]의 [Routes 설정]을 클릭합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_11.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

- Destination에는 [test2-subnet]의 아이피 대역을 입력 (서버의 아이피로 입력해도 됨)  
- Target Type은 [VPCPEERING]을 선택
- Target Name은 [test-vpc-peering]을 선택

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_12.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

다음으로 [test2-vpc-default-public-table]의 [Routes 설정]을 클릭합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_13.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

- Destination에는 [test-subnet]의 아이피 대역을 입력 (서버의 아이피로 입력해도 됨)  
- Target Type은 [VPCPEERING]을 선택
- Target Name은 [test2-vpc-peering]을 선택

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_14.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

## 서버 준비
아래와 같이 테스트로 사용할 서버 2대를 준비했습니다.  
테스트는 [test-vpc]에 위치한 [test-vpc-peering-svr]서버 -&gt; [test2-vpc]에 위치한 [test2-vpc-peering-svr]로 접속 시도를 해보겠습니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_15.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

## ACG 설정
ACG를 설정하지 않고 [test-vpc-peering-svr] -&gt; [test2-vpc-peering-svr]로 접속 시도를 하면 접속이 되지 않는 것을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_19.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

[test2-vpc-peering-svr]로 접속할 것이므로 해당 서버에 설정된 acg인 [test2-vpc-default-acg]를 선택하고 [ACG 설정] 버튼을 클릭합니다. 

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_20.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

접근소스에는 [test-vpc-peering-svr] 서버의 subnet 대역인 [192.168.10.0/24]를 입력하고, 포트는 22번 포트를 입력하고 추가해서 적용합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_21.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

## 접속 테스트 
ACG 설정까지 완료하고 나서 다시 접속 테스트를 해보면 아래와 같이 접속이 잘 되는 것을 확인할 수 있습니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_22.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

## 다른 계정 VPC 연결
위에서는 동일한 내 계정에 생성된 VPC들 간의 Peering을 살펴보았는데, 아래에서는 다른 계정에 생성된 VPC와 연결할 때의 화면을 살펴보겠습니다.

VPC Peering 생성 화면에서 [다른 계정]을 선택하면 아래와 같이 [로그인 ID (이메일)], [VPC ID], [VPC 이름]을 입력하게 됩니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_23.png&quot; width=&quot;700&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

마찬가지로 VPC Peering 요청 내용을 확인하고 [확인] 버튼을 클릭합니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_24.png&quot; width=&quot;500&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

다음으로 수락을 요청받은 다른 계정의 VPC Peering 화면에 가면 요청 내용을 확인할 수 있고, 요청 응답에서 [수락] 버튼을 클릭합니다. 

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_25.png&quot; width=&quot;770&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

한번 더 VPC Peering 연결 요청을 수락할 것인지 확인하는 창이 나타납니다. 

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_26.png&quot; width=&quot;500&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

수락하고 나면 역방향의 VPC Peering 연결을 생성해야 한다는 안내와 함께 역방향 VPC Peering 생성 화면이 나타납니다.  
역방향은 위의 설정과 반대로 진행하면 되고, 그 이후에는 내 계정에서 설정했던 것과 마찬가지로 설정하시면 완료됩니다.

{% include image.html file=&quot;networking/ncloud_networking_vpc_peering_guide_27.png&quot; width=&quot;500&quot; alt=&quot;Ncloud VPC 환경에서 VPC Peering 생성 가이드&quot; caption=&quot;&quot; %}

## 제한사항

{% include callout_v2.html type=&quot;warning&quot; level=&quot;1&quot; content=&quot;
&amp;#8259; VPC Peering은 연결하려는 VPC들의 IP주소 대역이 달라야 합니다. &lt;br /&gt;
&amp;#8259; 일치되거나 중첩되는 대역이 있으면 설정되지 않습니다.&quot; %}
{% include callout_v2.html type=&quot;info&quot; level=&quot;1&quot; content=&quot;
&amp;#8259; VPC Peering은 단방향입니다. &lt;br /&gt;
&amp;#8259; TCP등 양방향 통신을 해야 하는 경우에는 요청 / 수락 VPC를 맞바꾸어 역방향 Peering도 추가 생성해야 합니다.&quot; %}
{% include callout_v2.html type=&quot;danger&quot; level=&quot;1&quot; content=&quot;
&amp;#8259; VPC Peering은 전이적 연결 관계를 지원하지 않습니다. &lt;br /&gt;
&amp;#8259; 즉, Peering된 VPC를 통하여 다른 VPC 혹은 외부로 통신하는 것은 불가능 합니다.&quot; %}
{% include callout_v2.html type=&quot;success&quot; level=&quot;1&quot; content=&quot;
&amp;#8259; VPC Peering은 동일한 리전 내 VPC 끼리만 연결할 수 있습니다.&quot; %}


## 참고 URL
1. VPC Peering 가이드
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-vpc-vpcdetailedpeering&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-vpc-vpcdetailedpeering&lt;/a&gt;

2. VPC Peering 설정 시나리오
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/networking-vpc-vpcuserscenario4&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/networking-vpc-vpcuserscenario4&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  </description>
            <pubDate>Fri, 03 Nov 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/networking/ncloud_networking_vpc_peering_guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/networking/ncloud_networking_vpc_peering_guide.html</guid>
            
            <category>vpc</category>
            
            
        </item>
        
        <item>
            <title>Ncloud Security Monitoring WAF 서비스 요금 정보</title>
            <description>## 개요
Ncloud (네이버 클라우드) Security Monitoring 서비스는 무료인 Basic 서비스와 유료인 Managed 서비스가 있고, 그 중에서 유료 서비스인 Managed 서비스는 IDS, Anti-DOS, WAF, Anti-Virus, IPS 등 4가지 서비스를 모두 제공하고 있는데 그 중에서 WAF(Web Application Firewall) 서비스의 이용 요금 구성과 신청 시 주의 사항에 대해 정리해보겠습니다.

## 구성
WAF 서비스 장비는 [**WAF VM + WAF LB**]로 구성되어 있습니다. 따라서 사용 요금도 WAF VM 요금과 WAF LB 요금이 별도로 청구됩니다.

{% include image.html file=&quot;security/ncloud-security-security-monitoring-waf-guide-01.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud (네이버 클라우드) Security Monitoring WAF 구성도&quot; caption=&quot;&quot; %}


## 요금
&lt;div class=&quot;col-sm-12&quot;&gt;
&lt;table class=&quot;simple_table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;상품명&lt;/th&gt;
      &lt;th&gt;과금 구간 (Mbps)&lt;/th&gt;
      &lt;th&gt;가격 (월 요금, VAT별도)&lt;/th&gt;
      &lt;th&gt;비고&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;4&quot;&gt;WAF VM&lt;/td&gt;
        &lt;td&gt;0 ~ 100 이하&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;974,800 원&lt;/td&gt;
        &lt;td rowspan=&quot;4&quot;&gt;리전 단위 판매&lt;br /&gt;이중화 기본 제공&lt;br /&gt;(요금은 이중화 가격)&lt;/td&gt;
    &lt;/tr&gt; 
    &lt;tr&gt;        
        &lt;td&gt;100 초과 ~ 300 이하&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,174,800 원&lt;/td&gt;        
    &lt;/tr&gt; 
    &lt;tr&gt;        
        &lt;td&gt;300 초과 ~ 500 이하&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,474,800 원&lt;/td&gt;        
    &lt;/tr&gt;
    &lt;tr&gt;        
        &lt;td&gt;500 초과 ~ 1,000 이하&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;2,274,800 원&lt;/td&gt;        
    &lt;/tr&gt;  
    &lt;tr&gt;
        &lt;td&gt;WAF LB&lt;/td&gt;
        &lt;td&gt;WAF LB 1개당&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;25,200 원&lt;/td&gt;
        &lt;td&gt;WAF LB개수는 WAF 모니터링을 신청하려는&lt;br /&gt;도메인 개수 또는 인증서 개수를 의미&lt;/td&gt;
    &lt;/tr&gt; 
  &lt;/tbody&gt;
&lt;/table&gt;  
&lt;/div&gt;

### 과금 구간 기준
과금 구간을 결정, 변경하게 되는 기준은 **`월 기준 in/out 트래픽 중에서 Peak 트래픽입`**니다. 그러므로 월 기준으로 단 한번이라도 신청 구간을 초과할 경우 과금 기준이 변경될 수 있습니다.

### 서브 도메인의 요금
- **개별 인증서**를 사용하는 서브 도메인은 인증서 개수 만큼 WAF LB 요금이 추가 됩니다.
- **Wildcard 인증서**를 사용하는 서브 도메인은 추가 요금 없이, 개수 제한 없이 사용 가능합니다.
- 다만, 서브 도메인 개수나 트래픽에 따라 WAF LB 또는 WAF VM이 추가 되어 요금이 증가할 수 있습니다.

## 요금 예시

&lt;div class=&quot;col-sm-12&quot;&gt;
&lt;table class=&quot;simple_table&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;해당 월 Peak 트래픽&lt;/th&gt;   
      &lt;th&gt;도메인 또는&lt;br /&gt;인증서 개수&lt;/th&gt;   
      &lt;th&gt;WAF VM 요금 (VAT 별도)&lt;/th&gt;      
      &lt;th&gt;WAF LB 요금 (VAT 별도)&lt;/th&gt;
      &lt;th&gt;합계 (VAT 별도)&lt;br /&gt;&lt;br /&gt;(WAF VM 요금 + WAF LB 요금)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;    
    &lt;tr&gt;
        &lt;td&gt;160 Mbps&lt;/td&gt;        
        &lt;td&gt;1개&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,174,800 원&lt;/td&gt;        
        &lt;td style=&quot;text-align:right;&quot;&gt;25,200 원&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,200,000 원&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;160 Mbps&lt;/td&gt;        
        &lt;td&gt;2개&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,174,800 원&lt;/td&gt;        
        &lt;td style=&quot;text-align:right;&quot;&gt;50,400 원&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,225,200 원&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;300 Mbps&lt;/td&gt;        
        &lt;td&gt;1개&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,174,800 원&lt;/td&gt;        
        &lt;td style=&quot;text-align:right;&quot;&gt;25,200 원&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,200,000 원&lt;/td&gt;
    &lt;/tr&gt; 
    &lt;tr&gt;
        &lt;td&gt;301 Mbps&lt;/td&gt;        
        &lt;td&gt;1개&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,474,800 원&lt;/td&gt;        
        &lt;td style=&quot;text-align:right;&quot;&gt;25,200 원&lt;/td&gt;
        &lt;td style=&quot;text-align:right;&quot;&gt;1,500,000 원&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;  
&lt;/div&gt;

{% include callout-v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;WAF 이용 요금은 고객 서비스의 서버 정지와 무관하게 청구됩니다. 서버 정지와 함께 Security Monitoring 서비스의 WAF 계약도 함께 해지해야 과금되지 않습니다.&quot; %}

{% include callout-v2.html type=&quot;info&quot; level=&quot;3&quot; content=&quot;SLA 수준이 낮은 [단일구성 WAF서비스]를 이용하고자 하시면, 고객지원으로 문의하셔야 합니다.&quot; %}

## WAF 신청 시 주의 사항

### VPC

- **`Application Load Balancer 사용 필수`**: WAF는 Reverse Proxy 방식으로 사용자별 별도의 WAF 플랫폼을 구성하여 제공하고, HTTP/HTTPS 트래픽에 대한 보안 모니터링을 제공합니다. 따라서 Application Load Balancer를 사용하는 HTTP/HTTPS 서비스에만 제공이 가능합니다.
- **`서비스 도메인 필수`**: WAF 서비스를 사용하려면 사용자 서비스 도메인의 CNAME을 WAF Load Balancer 도메인 정보로 수정하여 트래픽이 WAF를 향하도록 설정해야 합니다. 그러므로 서비스 도메인이 있어야 서비스를 신청할 수 있습니다.
- **서비스 인증서 전달**: HTTPS 서비스 모니터링을 위해 WAF Load Balancer에 인증서를 설치해야 하며, 서비스 신청 시 사용자 서비스의 인증서도 함께 전달해야 합니다.
- **HTTP 80 리스너 설정**: WAF VM과 사용자 서비스 Application Load Balancer 간의 통신은 HTTP 80 port 공인 통신을 사용합니다. 그러므로 사용자 서비스 Application Load Balancer에 HTTP 80 리스너를 기본으로 구성해야 합니다.
- **리다이렉션 설정**: WAF Load Balancer에서 80 포트에 대한 443 리다이렉트 설정도 기본으로 지원하고 있습니다. 따라서 WAF 서비스를 정상적으로 사용하려면 사용자의 Application Load Balancer나 서버에서 HTTP -&gt; HTTPS 리다이렉트가 있는 경우 삭제해야 합니다.
- **HTTP 프로토콜 설정**: HTTPS 모니터링 신청 시, 신청한 Application Load Balancer 리스너에 HTTP 프로토콜 설정이 필요합니다.
- **CNAME 설정**: WAF(V2) 제공을 위해서 고객 대상 도메인에 CNAME 설정을 해야 합니다. 고객 대상 도메인이 Base 도메인인 경우, CNAME 설정이 불가능하오니 A레코드에 WAF VIP로 설정합니다. 그리고, WAF 구성 후 고객에게 CNAME에 등록할 WAF Load Balancer 도메인 설정 정보 전달 예정입니다.


### Classic
- **HTTP/HTTPS 표준 프로토콜 사용 필수**: WAF는 HTTP/HTTPS 표준 프로토콜을 사용하는 웹 서비스에 대한 보안 모니터링을 제공합니다. 따라서 네이버 클라우드 플랫폼의 Load Balancer를 사용 중인 서비스에 대한 모니터링을 하려면 Load Balancer Protocol을 반드시 HTTP, HTTPS로 설정해야 합니다. 만약 TCP, SSL로 설정하는 경우 WAF 서비스를 사용할 수 없습니다.



## 참고 URL
1. Ncloud Security Monitoring 서비스 안내
- &lt;a href=&quot;https://www.ncloud.com/product/security/securityMonitoring&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://www.ncloud.com/product/security/securityMonitoring&lt;/a&gt;

2. Ncloud Security Monitoring 가이드 
- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/securitymonitoring-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/securitymonitoring-overview&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}</description>
            <pubDate>Fri, 03 Nov 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/security/ncloud-security-security-monitoring-waf-price-info.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/security/ncloud-security-security-monitoring-waf-price-info.html</guid>
            
            <category>security</category>
            
            <category>monitoring</category>
            
            
        </item>
        
        <item>
            <title>Ncloud 데이터베이스 마이그레이션 서비스 | From MariaDB To MySQL 8.0</title>
            <description>## 개요
Ncloud(네이버 클라우드)의 Database Migration Service는 다양한 환경의 데이터베이스를 클라우드 환경으로 손쉽게 마이그레이션하도록 도와주는 서비스로 여기서는 **Public** 환경의 [**MariaDB**]를 **Private** 환경의 [**Cloud DB for MySQL 8.0**]으로 마이그레이션하는 방법에 대해 정리해보겠습니다.

## 서비스에서 제공하는 기능
- **마이그레이션의 단계별 작업 자동화**: Migration 작업을 생성하여 마이그레이션에 필요한 단계별 작업 자동화
- **Endpoint 관리 기능**: 손쉽게 Source DB Endpoint 생성 및 관리 가능
- **연결 테스트 기능**: 마이그레이션 실행 전 Source DB와 Target DB 간 연결 테스트 진행
- **마이그레이션 작업 내역 모니터링**: 마이그레이션 작업 상태와 내역 조회 가능

## 지원 데이터베이스
Database Migration Service는 MySQL 데이터베이스 간 마이그레이션을 지원합니다.

- Major 버전이 동일한 데이터베이스 간의 마이그레이션이 권장됩니다.
- Source DB는 MariaDB도 가능합니다.
- Target DB는 MySQL만 가능합니다.

{% include callout-v2.html type=&quot;warning&quot; level=&quot;4&quot; content=&quot;
&amp;#8259; MariaDB도 마이그레이션이 가능하지만 MySQL 8.0과의 호환성 문제로 마이그레이션이 실패할 수도 있습니다. &lt;br /&gt;
&amp;#8259; 마이그레이션이 실패했을 경우에는  MariaDB &lt;i class=&apos;fa-solid fa-right-long&apos; &gt;&lt;/i&gt; MySQL 5.7 &lt;i class=&apos;fa-solid fa-right-long&apos; &gt;&lt;/i&gt;  MySQL 8.0 이렇게 2단계로 마이그레이션 하는 방법을 시도해보시기 바랍니다.
&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-41.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 상세 설정 지원 여부
Source DB의 상세 설정에 따른 지원 여부는 다음과 같습니다.

### 지원 항목
- 데이터베이스, TABLE의 캐릭터셋(CharacterSet): euckr, utf8(utf8mb3), utf8mb4 지원
- Table, View, Stored Procedure, Function, Trigger 마이그레이션 지원

### 미지원 항목
- TABLE ENGINE: MyISAM, BLACKHOLE, FEDERATED, ARCHIVE 미지원
- 사용자 계정 정보, MariaDB Config 항목, Event 마이그레이션 미지원


## 마이그레이션 진행 구조
마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근하여 DB 데이터를 가져오는 방식`**으로 진행됩니다.   

또한 작업 진행 단계는 다음과 같습니다.
1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 완료 상태
4. 마이그레이션 작업 완료

## 서비스 점검
마이그레이션 작업을 진행할 때 서비스 점검을 언제할 것인가가 중요한 고려사항이 됩니다. 물론 가장 안전한 방법은 마이그레이션 작업 전에 서비스 점검을 시작하는 것이지만, DB의 용량이 클 경우는 [**Export**], [**Import**] 각각 몇 시간씩 소요될 수 있는데, 오랜 시간 서비스 점검을 하려면 부담이 될 수 밖에 없습니다.  
그러므로 오랜 시간 동안 서비스 점검을 하기 어려울 경우 다음과 같이 진행하면 되겠습니다.  

마이그레이션에서 [**Export**], [**Import**] 작업이 끝나면 두 DB간의 **Replication** 상태가 유지되는데 이때는 [**Source DB**]에 새로운 데이터가 추가되면 자동으로 [**Target DB**]로 복제가 됩니다. 그러므로 두 DB 간의 **Replication**이 완료 상태에서 서비스 점검을 시작하고 최종 마이그레이션 작업이 완료된 후에 서비스 점검을 종료하면 됩니다. 

1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 상태
4. 서비스 점검 시작
5. 마이그레이션 작업 완료
6. 서비스 점검 종료

## 테스트 환경
Source DB는 Ncloud(네이버 클라우드) 외부에 위치한 경우가 많을 것으로 예상되므로 다음과 같은 사항들을 가정하고 테스트 환경을 준비해보겠습니다.

- **Source DB**와 **Target DB**가 사설 네트워크로 접근이 불가능한 **서로 다른 네트워크 환경**에 존재한다.
- **Source DB**는 외부에서 공인 IP로 접근 가능한 **Public 네트워크 환경**에 존재한다.
- **Target DB**는 외부에서 접근이 불가능한 **Private 네트워크 환경**에 존재한다.
- **Target DB**는 `NAT Gateway`를 통해서 **Source DB**에 접근한다.

### DB 버전 정보
- Source DB: CentOS 7.8, MariaDB 10.4.31
- Target DB: Cloud DB for MySQL 8.0.32

{% tabs db-verstion %}

{% tab db-verstion Source DB %}

&amp;#8259; **Source DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-00.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab db-verstion Target DB %}

&amp;#8259; **Target DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-06.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

### Source DB 정보 확인
테스트에 사용할 Source DB의 버전, Database, DB User 등의 정보를 확인해보겠습니다.

{% tabs sourcedb-setting %}

{% tab sourcedb-setting MariaDB 버전 %}

&amp;#8259; **MariaDB 버전**  
테스트에 사용할 DB는 아래에서 확인할 수 있듯이 MariaDB 5.7.43입니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-01.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Database %}

&amp;#8259; **Database**  
테스트를 위해 testdb1, testdb2 이렇게 2개의 DB를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting 계정 %}

&amp;#8259; **계정**  
테스트를 위한 abcd1, abcd2 이렇게 2개의 DB User를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Table %}

&amp;#8259; **Table**  
테스트용 Database에 sampletable1, sampletable2 이렇게 각각 테이블을 1개씩 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Procedure %}

&amp;#8259; **Procedure**  
테스트용 Database testdb2에 new_procedure2라는 이름의 Procedure를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

## Source DB 사전 설정

### 마이그레이션 전용 DB User 생성
마이그레이션을 위한 전용 유저 즉, Target DB에서 Source DB로 접속할 때 사용할 DB User를 아래와 같이 생성합니다.

- 패스워드는 최소 8자 이상, 최대 21 자까지만 입력이 가능합니다.  
영문 / 특수문자 / 숫자가 포함되어야 합니다.  
` &amp; + \ &quot; &apos; / 스페이스 는 패스워드로 사용할 수 없습니다.  
- 기본 시스템DB를 제외한 사용자가 추가로 생성한 모든 데이터베이스에 대해 권한을 부여합니다.

``` sql
CREATE USER &apos;migration_test&apos;@&apos;%&apos; IDENTIFIED BY &apos;[패스워드]&apos;;
GRANT RELOAD, PROCESS, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT ON mysql.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT, SHOW VIEW, LOCK TABLES, TRIGGER ON [사용자 생성 DB].* TO &apos;migration_test&apos;@&apos;%&apos;;
FLUSH PRIVILEGES;
```

- 위쪽에서 Source DB에 테스용으로 [**testdb1**], [**testdb2**] 이렇게 2개를 데이터베이스가 존재하므로 두 개의 데이터베이스 각각에 대해 권한을 부여했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-06.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Character Set 점검
Target DB로 생성되는 Cloud DB for MySQL은 [**utf8, utf8mb4, euckr**] Character Set만 지원합니다.  
Source DB에 이 외의 설정으로 되어 있다면 Character Set을 변경 후 마이그레이션을 진행해야 합니다.

- Character Set 점검 쿼리  

``` sql
SELECT character_set_name
FROM information_schema.TABLES T, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY CCSA
WHERE CCSA.collation_name = T.table_collation 
AND TABLE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND CCSA.character_set_name NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos; );

SELECT DEFAULT_CHARACTER_SET_NAME
FROM information_schema.SCHEMATA T
WHERE SCHEMA_NAME NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND DEFAULT_CHARACTER_SET_NAME NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos;);
```

- Character Set 변경 쿼리 예시 

``` sql
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8;
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8 COLLATE utf8_general_ci;
ALTER TABLE [테이블명] CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;
```

### sql_mode 설정 점검 {#sql_mode}
MariaDB에서 지원하는 sql_mode=&apos;NO_AUTO_CREATE_USER&apos; 설정은 MySQL 8.0 버전에서는 지원하지 않기 때문에, Source DB에서 사용된 곳이 있으면 찾아서 해당 옵션을 제거해야 합니다.

#### sql_mode 설정 점검 쿼리
Procedure, Function 등의 ROUTINE과 TRIGGER에서 사용되므로 아래 쿼리로 [**NO_AUTO_CREATE_USER**] 옵션이 사용된 곳이 있는지 점검합니다.

``` sql
SELECT ROUTINE_SCHEMA, ROUTINE_NAME, SQL_MODE
FROM information_schema.routines
WHERE ROUTINE_SCHEMA NOT IN (&apos;sys&apos;,&apos;mysql&apos;);

SELECT TRIGGER_SCHEMA, TRIGGER_NAME, sql_mode
FROM information_schema.triggers
WHERE TRIGGER_SCHEMA NOT IN (&apos;sys&apos;,&apos;mysql&apos;);
```

- 테스트용 Source DB에서 점검 쿼리를 실행해보면 아래와 같이 [**testdb2**]의 [**new_procedure2**]에 [**NO_AUTO_CREATE_USER**] 옵션이 적용되어 있는 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-07.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### sql_mode 호환성 이슈 조치 방법
Procedure, Function, Trigger의 Dump 파일을 생성하고 [**NO_AUTO_CREATE_USER**] 옵션을 제거한 후 다시 적용하면 됩니다.

- Procedure, Function, Trigger 에 대해서만 drop 및 create 구문이 생성된 sql 파일 생성  

``` bash
~# mariadb-dump -u {사용자명} -p  --routines --triggers  --no-create-info --no-data --no-create-db --add-drop-trigger --databases {사용자 DB} &gt; backup.sql
```
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-08.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- backup.sql 파일내 NO_AUTO_CREATE_USER 구문 모두 제거  
해당 옵션을 일일이 찾아서 제거하기 힘드니 vim 에디터에서 [**NO_AUTO_CREATE_USER**] 문자를 찾아서 제거하는 명령을 실행합니다.  
경우에 따라서는 Dump 파일에 [**NO_AUTO_CREATE_USER**] 옵션이 포함되지 않는 경우도 있습니다. 이때는 걱정말고 Dump 파일을 그냥 그대로 적용하면 됩니다.

``` bash   
vim 명령: %s /NO_AUTO_CREATE_USER,//g

원본 예시: SET sql_mode = &apos;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;  
수정 예시: SET sql_mode = &apos;STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION&apos;
```
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-09.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- 적용하기  
수정된 Dump 파일을 Source DB에 적용합니다.

``` bash
~# mariadb -u {사용자명} -p {사용자 DB} &lt; backup.sql
```
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### sql_mode 설정 변경 확인
설정이 제대로 변경되었는지 점검 쿼리로 다시 확인해보겠습니다.

``` sql
SELECT ROUTINE_SCHEMA, ROUTINE_NAME, SQL_MODE
FROM information_schema.routines
WHERE ROUTINE_SCHEMA NOT IN (&apos;sys&apos;,&apos;mysql&apos;);
```

- 아래 스샷처럼 [**NO_AUTO_CREATE_USER**] 옵션이 사라진 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-11.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


### 바이너리 로그 설정 {#log_bin}
Source DB의 바이너리 로그 설정 중에서, [**server_id**] 값이 설정되어 있는지와 [**log_bin**]이 ON 상태로 설정되어 있지 확인 후 설정되어 있지 않다면 설정 후에 진행해야 합니다.

#### 현재 설정 확인  
아래 쿼리를 사용해 현재 설정 값을 확인합니다.  

``` sql
show variables like &apos;server_id&apos;;
show variables like &apos;log_bin&apos;;
```

- 현재 테스트용 Source DB는 [**server_id**]는 설정되어 있고, [**log_bin**]은 설정되어 있지 않은 상태입니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-12.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 설정 변경
MariaDB의 환경 설정 파일 [**server.cnf**]를 열어서 아래 값을 추가하고, MariaDB 데몬을 재시작합니다.
``` bash
~# vim /etc/my.cnf.d/server.cnf

log-bin
log-basename = mariadb
binlog-format = mixed
character-set-server = utf8

~# systemctl restart mariadb
```

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-13.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-14.png&quot; sub-class=&quot;docimage-no-top&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 변경 설정 확인  
설정 변경 후에 확인해보면 아래와 같이 [**server_id**] 값이 설정되어 있고, [**log_bin**]이 ON 상태로 변경된 것을 알 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-15.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## Target DB 사전 설정
위에서 [Source DB]의 사전 설정이 끝났으므로 이제 [**Target DB**]의 사전 설정이 필요한 항목을 확인해보겠습니다.

### DEFINER 계정 확인 {#DEFINER}
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재한다면 이 때 사용된 DB User 즉, [**DEFINER**] 계정을 [**Target DB**]에도 미리 추가 생성해 두어야 마이그레이션을 진행할 수 있습니다.

아래 쿼리는 [**Procedure**], [**Function**], [**VIEW**] 등을 생성할 때 사용된 [**DEFINER**] 계정을 확인하는 쿼리입니다.  

``` sql
SELECT DEFINER FROM information_schema.ROUTINES
WHERE ROUTINE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos;;

SELECT DEFINER FROM information_schema.VIEWS
WHERE table_schema NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos; ;
```

- 위에서 [**Source DB**]에 테스트 환경을 설정하면서 [**Procedure**]를 하나 생성했었는데 그때 사용된 [**DEFINER**] 계정을 확인할 수 있었습니다. 여기서 확인된 DB User를 [**Target DB**]에 미리 추가 생성해 두어야 합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-16.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;위 단계에서 DEFINER User가 없는 것으로 확인될 경우 DEFINER User 추가 없이 다음 단계로 진행하셔도 됩니다.&quot; %}

### DEFINER 계정 추가
[**Target DB**]를 선택하고 [**DB 관리**] - [**DB User 관리**] 메뉴를 선택합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-25.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- DB User 관리 화면에서 위에서 확인했던 [**DEFINER**] 계정을 DDL 권한으로 설정해서 추가하고 저장합니다. 
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-24.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 접근 권한 설정 {#ACG}
[**Source DB**], [**Target DB**] 양쪽의 사전 설정을 모두 완료했으면, 다음으로는 양쪽 DB간의 접근 권한을 설정해야 합니다.  
앞에서도 설명했지만 마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하게 됩니다.

### NAT Gateway 생성
현재 [**Target DB**]는 [**Private**] 네트워크 환경에 위치해 있으므로 [**Source DB**]로 접근하기 위해서는 [**NAT Gateway**]를 생성해서 외부 통신이 가능하도록 해야 합니다.  
여기서는 [**NAT Gateway**]가 생성되어 있다고 가정하고, 어떻게 설정하는지 확인해보겠습니다.  

- [**NAT Gateway**] 상세 정보 중에서 [**공인 IP**]는 따로 기록해 두었다가, 아래쪽에서 [**방화벽(ACG) 설정**]에서 사용하게 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-15.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

VPC 환경에서 [**NAT Gateway**]를 생성하는 상세한 방법은 아래 문서를 참고하시면 됩니다.

{% include callout-v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; &lt;a href=&apos;/networking/ncloud_networking_natgw_routetb.html&apos; target=&apos;_blank&apos; style=&apos;word-break:break-all;&apos;&gt;VPC 환경에서 NAT Gateway 생성하는 방법&lt;/a&gt;
&quot; %}

### Route Table 설정
다음으로 [**VPC**] - [**Route Table**]에서 [**Target DB**]의 Subnet에 연관된 [**Route Table**]을 선택하고, [**Routes 설정**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-16.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- **Route Table 설정** 화면에서 [**Destination**]에는 [**Source DB**]의 공인 IP를 입력하고, [**Target Type**]은 [**NATGW**], [**Target Name**]은 위에서 생성했던 **NAT Gateway**를 선택하고 [**생성**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-17.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 방화벽(ACG) 설정
**`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하여 DB 데이터를 가져오기 위해 [**Target DB**] 방화벽에서는 [**Outbound**] 규칙을,  [**Source DB**] 방화벽에서는 [**Inbound**] 규칙을 설정해야 합니다.

#### Target DB ACG 설정
우선 [**Target DB**]의 [**Outbound**] 규칙을 설정해보겠습니다. [**Target DB**]를 선택하면 나타나는 DB 상세 정보 화면에서 [**ACG**]를 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-26.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG**] 화면에서 해당 ACG를 선택하고 [**ACG 설정**] 메뉴를 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG 규칙 설정**] 팝업에서 [**Outbound**] 탭을 선택하고, [**목적지**]에는 [**Source DB**]의 IP 주소, [**허용 포트**]에는 [**Source DB**]의 포트 번호를 입력한 후 [**추가**]-[**적용**] 버튼을 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


#### Source DB 방화벽 설정
이제 [**Source DB**] 방화벽에 위에서 확인했던 [**NAT Gateway**]의 [**공인 IP**]를 추가해서 [**Taget DB**]가 접근할 수 있도록 설정하겠습니다.

- On Premise 등 Ncloud 외부 서버의 경우 자체 방화벽에 직접 추가하시면 됩니다.  

- Ncloud 내부 서버의 경우 해당 서버의 ACG의 [**Inbound**] 설정에 아래처럼 추가하면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-18.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 서비스 위치
이제 모든 준비를 마쳤으면 본격적으로 마이그레이션 작업을 진행해보겠습니다.  
[**Database Migration**] 서비스는 [**Services**] - [**Database**] - [**Database Migration**]에 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-19.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 설정
[**Source DB**]와 [**Target DB**]에서 사전 준비가 끝났으면 이제 [**Database Migration Service**] 설정을 시작합니다.

### Endpoint 설정 {#Endpoint}
우선 [**Database Migration Service**] - [**Endpoint Management**] 메뉴에서 [**Endpoint 생성**] 버튼을 클릭합니다.  
여기서 [**Endpoint**]는 [**Source DB**]를 지칭하는 것으로 [**Source DB**]의 정보를 입력한다고 생각하시면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-20.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

다음으로 Endpoint 생성화면에서 [**Source DB**] 관련 정보를 입력하고 [**생성**] 버튼을 클릭합니다.
- **Endpoint URL**: **Source DB의 IP 또는 도메인**을 입력합니다.
- **DB PORT**: Source DB의 Port를 입력합니다.
- **DB User**: 위에서 Source DB에 생성했던 **마이그레이션 전용 DB User**를 입력합니다.
- **DB Password**: 마이그레이션 전용 DB User의 패스워드를 입력합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-21.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 작업 생성
[**Database Migration Service**] - [**Migration Management**] 메뉴에서 [**Migration 작업생성**] 버튼을 클릭합니다. 

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-25.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Test Connection
[**Source DB**] 항목과 [**Target DB**] 항목을 선택한 후에 [**Test Connection**] 버튼을 클릭해 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**을 테스트 해봅니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-26.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 시작
[**Test Connection**]에서 이상이 없을 경우 아래와 같이 옮겨오게 될 [**Source DB**]의 정보를 확인할 수 있습니다. 문제가 없으면 [**Migration 작업시작**] 버튼을 클릭해서 마이그레이션 작업을 시작합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-17.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 진행 상태
마이그레이션 작업은 [**Exporting**], [**Importing**], [**Replication**] 이렇게 3가지 단계로 진행되는데, 각각의 진행 상태를 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-18.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-19.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 진행 상태 확인 메일
진행 상태는 콘솔에서도 확인할 수 있지만, 작업이 오래 걸리는 경우도 대비해서 각 단계가 완료될 때마다 안내 메일이 발송됩니다.

{% tabs migration-status %}

{% tab migration-status Export Completed %}

&amp;#8259; **Export Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-30.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Import Completed %}

&amp;#8259; **Import Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-31.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Migration Completed %}

&amp;#8259; **Migration Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-32.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;
이 단계까지 완료되면 현재 상태는 **Source DB**와 **Target DB**간의 **Replication**이 완료된 상태이므로 이때 서비스 점검을 시작하고 아래쪽의 마이그레이션 **완료** 버튼을 클릭해서 최종 완료를 확인한 후에 서비스 점검을 종료하면 되겠습니다. 
&quot; %}

## 마이그레이션 완료
마이그레이션 작업이 완료되면 아래와 같이 콘솔화면에서 [**완료**] 버튼이 활성화 됩니다. 즉, 현재는 [**Replication**] 작업이 완료된 상태로 [**Source DB**]와 [**Target DB**]가 동기화 되어 있고, [**Target DB**]는 [**쓰기 불가**] 상태입니다.  

그러므로 [**완료**] 버튼 클릭해야 모든 작업이 완료되고, [**Target DB**]가 [**쓰기 가능**] 상태로 변경됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-20.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**완료**] 버튼 클릭하면 아래와 같이 안내 메시지가 출력되고 [**확인**] 버튼을 클릭하면 완료됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-34.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 최종 완료
최종 완료가 되면 아래와 같이 [**Migration Status**] 상태가 **완료**상태로 변경되고 [**Migration 종료 일시**]로 기록됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-21.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## Target DB 데이터 확인
마이그레이션이 모두 완료되었으므로 [**Source DB**]의 데이터가 [**Target DB**]로 모두 이상 없이 마이그레이션 되었는지 [**Target DB**]에 접속해서 직접 확인해보겠습니다.  
확인해보는 방법은 [**Target DB**]와 동일한 [**Subnet**]에 테스터 서버를 생성하고,  [**Target DB**]에 접속해서 [**Database**], [**Table**], [**Procedure**] 등이 정상적으로 존재하는지 살펴보는 것인데, 아래 스샷처럼 모두 이상이 없는 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-27.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## 오류 상황
지금부터는 마이그레이션 진행 중에 나타날 수 있는 오류 메시지 관련해서 정리해보고, 해결 방법을 알아보겠습니다.

### 방화벽 설정 오류  
[**Source DB**]의 방화벽 Inbound 설정과 [**Target DB**]의 ACG Outbound 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [접근 권한 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#ACG) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 와 Target DB 서버 통신이 되지 않습니다. &lt;br/&gt;Source DB Inbound 와 Target DB Outbound ACG 를 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-36.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Endpoint DB User 설정 오류  
[**Endpoint 설정**]에서 [**DB User**] 또는 [**DB Password**] 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [Endpoint 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#Endpoint) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 에 접속이 되지 않습니다.&lt;br /&gt;DB ACL 을 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-37.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### DEFINER 계정 생성 오류
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재하고, 이때 사용된 DB User 즉, [**DEFINER**] 계정이 [**Target DB**]에 존재하지 않았을 경우 나타나는 메시지 입니다. [DEFINER 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#DEFINER) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB에 생성된 Definer 계정이 Target DB 에 존재하지 않습니다.&lt;br /&gt;Definer 에 사용된 계정은 먼저 생성후 진행해 주세요.&lt;br /&gt;필요 Definer 계정 : abcd2@%&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-38.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


### 바이너리 로그 설정 오류
Source DB의 바이너리 로그 설정 중에서, [server_id], [log_bin] 관련 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [바이너리 로그 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#log_bin) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;마이그레이션을 위해서는 Source DB Config 설정이 필요합니다.&lt;br /&gt;추가 필요 설정 : log_bin&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-39.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


### sql_mode 설정 오류
[**Source DB**] 사전 설정에서 sql_mode 관련된 설정을 수정하지 않았을 경우 아래와 같이 마이그레이션 진행 중에 [**Importing**] 단계에서 실패가 발생하고 [**에러 보기**] 버튼을 클릭하면 아래와 같은 메시지가 나타납니다. [sql_mode 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#sql_mode) 내용을 다시 확인해주세요.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-22.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;ERROR 1234 (42000) at line 98: Variable &apos;sql_mode&apos; can&apos;t be set to the value of &apos;NO_AUTO_CREATE_USER&apos;&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-13.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 마이그레이션 재실행
위와 같이 [**sql_mode**] 관련 오류로 마이그레이션 작업이 실패했을 경우에는 [**재시작**] 버튼으로 재시작을 할 경우에는 동일한 오류가 계속 발생하게 됩니다.   
이때는 [**sql_mode**] 설정을 수정한 후에 마이그레이션 작업을 삭제하고, [**Target DB**]에 생성된 [**Database**]을 모두 삭제 후에 마이그레이션 작업을 다시 생성해야 정상 작동합니다.

- [**sql_mode**] 설정을 수정한 후에 [**삭제**] 버튼을 클릭해서 마이그레이션 작업을 삭제합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-23.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**Target DB**]의 [**DB 관리**] - [**DB Server 상세보기**] 메뉴를 클릭해서 [**Database 관리**] 기능으로 이동합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mariadb-to-mysql80-guide-24.png&quot; sub-class=&quot;docimage-no-bottom&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MariaDB에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**Database 관리**]에서 [**Source DB**]에서 Import한 [**Database**]을 모두 삭제하고, [**저장**] 버튼을 클릭합니다.  
그런 후에 마이그레이션 작업을 다시 생성해야 정상 작동합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-15.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 참고 URL
1. Database Migration Service 개요
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/ko/dms-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/ko/dms-overview&lt;/a&gt;

2. Source DB 및 Target DB 접속 설정
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/dms-connect&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/dms-connect&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  
</description>
            <pubDate>Thu, 02 Nov 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mariadb-to-mysql80-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mariadb-to-mysql80-guide.html</guid>
            
            <category>database</category>
            
            <category>vpc</category>
            
            <category>MariaDB</category>
            
            
        </item>
        
        <item>
            <title>Ncloud 데이터베이스 마이그레이션 서비스 | From MySQL 8.0 To MySQL 8.0</title>
            <description>## 개요
Ncloud(네이버 클라우드)의 Database Migration Service는 다양한 환경의 데이터베이스를 클라우드 환경으로 손쉽게 마이그레이션하도록 도와주는 서비스로 여기서는 **Public** 환경의 MySQL 8.0을 **Private** 환경의 [**Cloud DB for MySQL 8.0**]으로 마이그레이션하는 방법에 대해 정리해보겠습니다.

## 서비스에서 제공하는 기능
- **마이그레이션의 단계별 작업 자동화**: Migration 작업을 생성하여 마이그레이션에 필요한 단계별 작업 자동화
- **Endpoint 관리 기능**: 손쉽게 Source DB Endpoint 생성 및 관리 가능
- **연결 테스트 기능**: 마이그레이션 실행 전 Source DB와 Target DB 간 연결 테스트 진행
- **마이그레이션 작업 내역 모니터링**: 마이그레이션 작업 상태와 내역 조회 가능

## 지원 데이터베이스
Database Migration Service는 MySQL 데이터베이스 간 마이그레이션을 지원합니다.

- Major 버전이 동일한 데이터베이스 간의 마이그레이션이 권장됩니다.
- Source DB는 MariaDB도 가능합니다.
- Target DB는 MySQL만 가능합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-41.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 상세 설정 지원 여부
Source DB의 상세 설정에 따른 지원 여부는 다음과 같습니다.

### 지원 항목
- 데이터베이스, TABLE의 캐릭터셋(CharacterSet): euckr, utf8(utf8mb3), utf8mb4 지원
- Table, View, Stored Procedure, Function, Trigger 마이그레이션 지원

### 미지원 항목
- TABLE ENGINE: MyISAM, BLACKHOLE, FEDERATED, ARCHIVE 미지원
- 사용자 계정 정보, MySQL Config 항목, Event 마이그레이션 미지원

## 마이그레이션 진행 구조
마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근하여 DB 데이터를 가져오는 방식`**으로 진행됩니다.   

또한 작업 진행 단계는 다음과 같습니다.
1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 완료 상태
4. 마이그레이션 작업 완료

## 서비스 점검
마이그레이션 작업을 진행할 때 서비스 점검을 언제할 것인가가 중요한 고려사항이 됩니다. 물론 가장 안전한 방법은 마이그레이션 작업 전에 서비스 점검을 시작하는 것이지만, DB의 용량이 클 경우는 [**Export**], [**Import**] 각각 몇 시간씩 소요될 수 있는데, 오랜 시간 서비스 점검을 하려면 부담이 될 수 밖에 없습니다.  
그러므로 오랜 시간 동안 서비스 점검을 하기 어려울 경우 다음과 같이 진행하면 되겠습니다.  

마이그레이션에서 [**Export**], [**Import**] 작업이 끝나면 두 DB간의 **Replication** 상태가 유지되는데 이때는 [**Source DB**]에 새로운 데이터가 추가되면 자동으로 [**Target DB**]로 복제가 됩니다. 그러므로 두 DB 간의 **Replication**이 완료 상태에서 서비스 점검을 시작하고 최종 마이그레이션 작업이 완료된 후에 서비스 점검을 종료하면 됩니다. 

1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 상태
4. 서비스 점검 시작
5. 마이그레이션 작업 완료
6. 서비스 점검 종료

## 테스트 환경
Source DB는 Ncloud(네이버 클라우드) 외부에 위치한 경우가 많을 것으로 예상되므로 다음과 같은 사항들을 가정하고 테스트 환경을 준비해보겠습니다.

- **Source DB**와 **Target DB**가 사설 네트워크로 접근이 불가능한 **서로 다른 네트워크 환경**에 존재한다.
- **Source DB**는 외부에서 공인 IP로 접근 가능한 **Public 네트워크 환경**에 존재한다.
- **Target DB**는 외부에서 접근이 불가능한 **Private 네트워크 환경**에 존재한다.
- **Target DB**는 `NAT Gateway`를 통해서 **Source DB**에 접근한다.

### DB 버전 정보
- Source DB: CentOS 7.8, MySQL 8.0.35
- Target DB: Cloud DB for MySQL 8.0.32

{% tabs db-verstion %}

{% tab db-verstion Source DB %}

&amp;#8259; **Source DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-00.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab db-verstion Target DB %}

&amp;#8259; **Target DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-06.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

### Source DB 정보 확인
테스트에 사용할 Source DB의 버전, Database, DB User 등의 정보를 확인해보겠습니다.

{% tabs sourcedb-setting %}

{% tab sourcedb-setting MySQL 버전 %}

&amp;#8259; **MySQL 버전**  
테스트에 사용할 DB는 아래에서 확인할 수 있듯이 MySQL 8.0.35입니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-01.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 8.0에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Database %}

&amp;#8259; **Database**  
테스트를 위해 testdb1, testdb2 이렇게 2개의 DB를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting 계정 %}

&amp;#8259; **계정**  
테스트를 위한 abcd1, abcd2 이렇게 2개의 DB User를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Table %}

&amp;#8259; **Table**  
테스트용 Database에 sampletable1, sampletable2 이렇게 각각 테이블을 1개씩 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Procedure %}

&amp;#8259; **Procedure**  
테스트용 Database testdb2에 new_procedure2라는 이름의 Procedure를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

## Source DB 사전 설정

### 마이그레이션 전용 DB User 생성
마이그레이션을 위한 전용 유저 즉, Target DB에서 Source DB로 접속할 때 사용할 DB User를 아래와 같이 생성합니다.

- 패스워드는 최소 8자 이상, 최대 21 자까지만 입력이 가능합니다.  
영문 / 특수문자 / 숫자가 포함되어야 합니다.  
` &amp; + \ &quot; &apos; / 스페이스 는 패스워드로 사용할 수 없습니다.  
- 반드시 **`mysql_native_password 형식`**으로 생성된 패스워드를 사용해야 합니다.
- 기본 시스템DB를 제외한 사용자가 추가로 생성한 모든 데이터베이스에 대해 권한을 부여합니다.
- MySQL **8.0.20 이상**은 8.0.19 이하 버전과 다르게 ROUTINE Dump를 위한 **SHOW_ROUTINE** 권한이 필수이니 버전에 맞게 쿼리를 사용해야 합니다.

{% tabs sourcedb-mig-user %}

{% tab sourcedb-mig-user 8.0.20 이상 %}

&amp;#8259; 위쪽에서 Source DB에 테스용으로 [**testdb1**], [**testdb2**] 이렇게 2개를 데이터베이스가 존재하므로 두 개의 데이터베이스 각각에 대해 권한을 부여했습니다.

``` sql
CREATE USER &apos;migration_test&apos;@&apos;%&apos; IDENTIFIED WITH &apos;mysql_native_password&apos;  BY &apos;[패스워드]&apos;;
GRANT SHOW_ROUTINE, RELOAD, PROCESS, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT ON mysql.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT, SHOW VIEW, LOCK TABLES, TRIGGER ON [사용자 생성 DB].* TO &apos;migration_test&apos;@&apos;%&apos;;
FLUSH PRIVILEGES;
```

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-08.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 8.0에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-mig-user 8.0.19 이하 %}

&amp;#8259; 위쪽에서 Source DB에 테스용으로 [**testdb1**], [**testdb2**] 이렇게 2개를 데이터베이스가 존재하므로 두 개의 데이터베이스 각각에 대해 권한을 부여했습니다.

``` sql
CREATE USER &apos;migration_test&apos;@&apos;%&apos; IDENTIFIED WITH &apos;mysql_native_password&apos;  BY &apos;[패스워드]&apos;;
GRANT RELOAD, PROCESS, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT ON mysql.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT, SHOW VIEW, LOCK TABLES, TRIGGER ON [사용자 생성 DB].* TO &apos;migration_test&apos;@&apos;%&apos;;
FLUSH PRIVILEGES;
```

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-09.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 8.0에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

### Character Set 점검
Target DB로 생성되는 Cloud DB for MySQL은 [**utf8, utf8mb4, euckr**] Character Set만 지원합니다.  
Source DB에 이 외의 설정으로 되어 있다면 Character Set을 변경 후 마이그레이션을 진행해야 합니다.

- Character Set 점검 쿼리  

``` sql
SELECT character_set_name
FROM information_schema.TABLES T, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY CCSA
WHERE CCSA.collation_name = T.table_collation 
AND TABLE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND CCSA.character_set_name NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos; );

SELECT DEFAULT_CHARACTER_SET_NAME
FROM information_schema.SCHEMATA T
WHERE SCHEMA_NAME NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND DEFAULT_CHARACTER_SET_NAME NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos;);
```

- Character Set 변경 쿼리 예시 

``` sql
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8mb4;
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
ALTER TABLE [테이블명] CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
```

### 바이너리 로그 설정 {#log_bin}
Source DB의 바이너리 로그 설정 중에서, [**server_id**] 값이 설정되어 있는지와 [**log_bin**]이 ON 상태로 설정되어 있지 확인 후 설정되어 있지 않다면 설정 후에 진행해야 합니다.

#### 현재 설정 확인  
아래 쿼리를 사용해 현재 설정 값을 확인합니다.  

``` sql
show variables like &apos;server_id&apos;;
show variables like &apos;log_bin&apos;;
```

- MySQL 8.0 부터는 기본적으로 설정이 되어 있으므로, 보통의 경우 특별한 조치 없이 그대로 진행하면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 8.0에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## Target DB 사전 설정
위에서 [Source DB]의 사전 설정이 끝났으므로 이제 [**Target DB**]의 사전 설정이 필요한 항목을 확인해보겠습니다.

### DEFINER 계정 확인 {#DEFINER}
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재한다면 이 때 사용된 DB User 즉, [**DEFINER**] 계정을 [**Target DB**]에도 미리 추가 생성해 두어야 마이그레이션을 진행할 수 있습니다.

아래 쿼리는 [**Procedure**], [**Function**], [**VIEW**] 등을 생성할 때 사용된 [**DEFINER**] 계정을 확인하는 쿼리입니다.  

``` sql
SELECT DEFINER FROM information_schema.ROUTINES
WHERE ROUTINE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos;;

SELECT DEFINER FROM information_schema.VIEWS
WHERE table_schema NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos; ;
```

- 위에서 [**Source DB**]에 테스트 환경을 설정하면서 [**Procedure**]를 하나 생성했었는데 그때 사용된 [**DEFINER**] 계정을 확인할 수 있었습니다. 여기서 확인된 DB User를 [**Target DB**]에 미리 추가 생성해 두어야 합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-22.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-top-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;위 단계에서 DEFINER User가 없는 것으로 확인될 경우 DEFINER User 추가 없이 다음 단계로 진행하셔도 됩니다.&quot; %}

### DEFINER 계정 추가
[**Target DB**]를 선택하고 [**DB 관리**] - [**DB User 관리**] 메뉴를 선택합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-06.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- DB User 관리 화면에서 위에서 확인했던 [**DEFINER**] 계정을 DDL 권한으로 설정해서 추가하고 저장합니다. 
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-24.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 접근 권한 설정 {#ACG}
[**Source DB**], [**Target DB**] 양쪽의 사전 설정을 모두 완료했으면, 다음으로는 양쪽 DB간의 접근 권한을 설정해야 합니다.  
앞에서도 설명했지만 마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하게 됩니다.

### NAT Gateway 생성
현재 [**Target DB**]는 [**Private**] 네트워크 환경에 위치해 있으므로 [**Source DB**]로 접근하기 위해서는 [**NAT Gateway**]를 생성해서 외부 통신이 가능하도록 해야 합니다.  
여기서는 [**NAT Gateway**]가 생성되어 있다고 가정하고, 어떻게 설정하는지 확인해보겠습니다.  

- [**NAT Gateway**] 상세 정보 중에서 [**공인 IP**]는 따로 기록해 두었다가, 아래쪽에서 [**방화벽(ACG) 설정**]에서 사용하게 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-15.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

VPC 환경에서 [**NAT Gateway**]를 생성하는 상세한 방법은 아래 문서를 참고하시면 됩니다.

{% include callout-v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; &lt;a href=&apos;/networking/ncloud_networking_natgw_routetb.html&apos; target=&apos;_blank&apos; style=&apos;word-break:break-all;&apos;&gt;VPC 환경에서 NAT Gateway 생성하는 방법&lt;/a&gt;
&quot; %}

### Route Table 설정
다음으로 [**VPC**] - [**Route Table**]에서 [**Target DB**]의 Subnet에 연관된 [**Route Table**]을 선택하고, [**Routes 설정**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-16.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- **Route Table 설정** 화면에서 [**Destination**]에는 [**Source DB**]의 공인 IP를 입력하고, [**Target Type**]은 [**NATGW**], [**Target Name**]은 위에서 생성했던 **NAT Gateway**를 선택하고 [**생성**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-17.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 방화벽(ACG) 설정
**`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하여 DB 데이터를 가져오기 위해 [**Target DB**] 방화벽에서는 [**Outbound**] 규칙을,  [**Source DB**] 방화벽에서는 [**Inbound**] 규칙을 설정해야 합니다.

#### Target DB ACG 설정
우선 [**Target DB**]의 [**Outbound**] 규칙을 설정해보겠습니다. [**Target DB**]를 선택하면 나타나는 DB 상세 정보 화면에서 [**ACG**]를 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG**] 화면에서 해당 ACG를 선택하고 [**ACG 설정**] 메뉴를 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG 규칙 설정**] 팝업에서 [**Outbound**] 탭을 선택하고, [**목적지**]에는 [**Source DB**]의 IP 주소, [**허용 포트**]에는 [**Source DB**]의 포트 번호를 입력한 후 [**추가**]-[**적용**] 버튼을 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


#### Source DB 방화벽 설정
이제 [**Source DB**] 방화벽에 위에서 확인했던 [**NAT Gateway**]의 [**공인 IP**]를 추가해서 [**Taget DB**]가 접근할 수 있도록 설정하겠습니다.

- On Premise 등 Ncloud 외부 서버의 경우 자체 방화벽에 직접 추가하시면 됩니다.  

- Ncloud 내부 서버의 경우 해당 서버의 ACG의 [**Inbound**] 설정에 아래처럼 추가하면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-18.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 서비스 위치
이제 모든 준비를 마쳤으면 본격적으로 마이그레이션 작업을 진행해보겠습니다.  
[**Database Migration**] 서비스는 [**Services**] - [**Database**] - [**Database Migration**]에 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-19.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 설정
[**Source DB**]와 [**Target DB**]에서 사전 준비가 끝났으면 이제 [**Database Migration Service**] 설정을 시작합니다.

### Endpoint 설정 {#Endpoint}
우선 [**Database Migration Service**] - [**Endpoint Management**] 메뉴에서 [**Endpoint 생성**] 버튼을 클릭합니다.  
여기서 [**Endpoint**]는 [**Source DB**]를 지칭하는 것으로 [**Source DB**]의 정보를 입력한다고 생각하시면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-20.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

다음으로 Endpoint 생성화면에서 [**Source DB**] 관련 정보를 입력하고 [**생성**] 버튼을 클릭합니다.
- **Endpoint URL**: **Source DB의 IP 또는 도메인**을 입력합니다.
- **DB PORT**: Source DB의 Port를 입력합니다.
- **DB User**: 위에서 Source DB에 생성했던 **마이그레이션 전용 DB User**를 입력합니다.
- **DB Password**: 마이그레이션 전용 DB User의 패스워드를 입력합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-21.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 작업 생성
[**Database Migration Service**] - [**Migration Management**] 메뉴에서 [**Migration 작업생성**] 버튼을 클릭합니다. 

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-25.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Test Connection
[**Source DB**] 항목과 [**Target DB**] 항목을 선택한 후에 [**Test Connection**] 버튼을 클릭해 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**을 테스트 해봅니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-26.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 시작
[**Test Connection**]에서 이상이 없을 경우 아래와 같이 옮겨오게 될 [**Source DB**]의 정보를 확인할 수 있습니다. 문제가 없으면 [**Migration 작업시작**] 버튼을 클릭해서 마이그레이션 작업을 시작합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-03.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 진행 상태
마이그레이션 작업은 [**Exporting**], [**Importing**], [**Replication**] 이렇게 3가지 단계로 진행되는데, 각각의 진행 상태를 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-04.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-05.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 진행 상태 확인 메일
진행 상태는 콘솔에서도 확인할 수 있지만, 작업이 오래 걸리는 경우도 대비해서 각 단계가 완료될 때마다 안내 메일이 발송됩니다.

{% tabs migration-status %}

{% tab migration-status Export Completed %}

&amp;#8259; **Export Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-30.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Import Completed %}

&amp;#8259; **Import Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-31.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Migration Completed %}

&amp;#8259; **Migration Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-32.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;
이 단계까지 완료되면 현재 상태는 **Source DB**와 **Target DB**간의 **Replication**이 완료된 상태이므로 이때 서비스 점검을 시작하고 아래쪽의 마이그레이션 **완료** 버튼을 클릭해서 최종 완료를 확인한 후에 서비스 점검을 종료하면 되겠습니다. 
&quot; %}

## 마이그레이션 완료
마이그레이션 작업이 완료되면 아래와 같이 콘솔화면에서 [**완료**] 버튼이 활성화 됩니다. 즉, 현재는 [**Replication**] 작업이 완료된 상태로 [**Source DB**]와 [**Target DB**]가 동기화 되어 있고, [**Target DB**]는 [**쓰기 불가**] 상태입니다.  

그러므로 [**완료**] 버튼 클릭해야 모든 작업이 완료되고, [**Target DB**]가 [**쓰기 가능**] 상태로 변경됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-06.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**완료**] 버튼 클릭하면 아래와 같이 안내 메시지가 출력되고 [**확인**] 버튼을 클릭하면 완료됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-34.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 최종 완료
최종 완료가 되면 아래와 같이 [**Migration Status**] 상태가 **완료**상태로 변경되고 [**Migration 종료 일시**]로 기록됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-07.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## Target DB 데이터 확인
마이그레이션이 모두 완료되었으므로 [**Source DB**]의 데이터가 [**Target DB**]로 모두 이상 없이 마이그레이션 되었는지 [**Target DB**]에 접속해서 직접 확인해보겠습니다.  
확인해보는 방법은 [**Target DB**]와 동일한 [**Subnet**]에 테스터 서버를 생성하고,  [**Target DB**]에 접속해서 [**Database**], [**Table**], [**Procedure**] 등이 정상적으로 존재하는지 살펴보는 것인데, 아래 스샷처럼 모두 이상이 없는 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-40.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## 오류 상황
지금부터는 마이그레이션 진행 중에 나타날 수 있는 오류 메시지 관련해서 정리해보고, 해결 방법을 알아보겠습니다.

### 방화벽 설정 오류  
[**Source DB**]의 방화벽 Inbound 설정과 [**Target DB**]의 ACG Outbound 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [접근 권한 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#ACG) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 와 Target DB 서버 통신이 되지 않습니다. &lt;br/&gt;Source DB Inbound 와 Target DB Outbound ACG 를 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-36.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Endpoint DB User 설정 오류  
[**Endpoint 설정**]에서 [**DB User**] 또는 [**DB Password**] 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [Endpoint 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#Endpoint) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 에 접속이 되지 않습니다.&lt;br /&gt;DB ACL 을 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-37.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### DEFINER 계정 생성 오류
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재하고, 이때 사용된 DB User 즉, [**DEFINER**] 계정이 [**Target DB**]에 존재하지 않았을 경우 나타나는 메시지 입니다. [DEFINER 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#DEFINER) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB에 생성된 Definer 계정이 Target DB 에 존재하지 않습니다.&lt;br /&gt;Definer 에 사용된 계정은 먼저 생성후 진행해 주세요.&lt;br /&gt;필요 Definer 계정 : abcd2@%&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-38.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 재실행
그 외의 오류로 마이그레이션 작업이 실패했을 경우 아래와 같이 [**재시작**], [**삭제**] 버튼이 활성화 되는데, [**재시작**] 버튼으로 재시작을 할 경우에는 동일한 오류가 계속 발생하는 경우가 있습니다.   
이때는 마이그레이션 작업을 삭제하고, [**Target DB**]에 생성된 [**Database**]을 모두 삭제 후에 마이그레이션 작업을 다시 생성해야 정상 작동합니다.

- [**삭제**] 버튼을 클릭해서 마이그레이션 작업을 삭제합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql80-to-mysql80-guide-10.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 8.0에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**Target DB**]의 [**DB 관리**] - [**DB Server 상세보기**] 메뉴를 클릭해서 [**Database 관리**] 기능으로 이동합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-16.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**Database 관리**]에서 [**Source DB**]에서 Import한 [**Database**]을 모두 삭제하고, [**저장**] 버튼을 클릭합니다.  
그런 후에 마이그레이션 작업을 다시 생성해야 정상 작동합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-15.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 참고 URL
1. Database Migration Service 개요
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/ko/dms-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/ko/dms-overview&lt;/a&gt;

2. Source DB 및 Target DB 접속 설정
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/dms-connect&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/dms-connect&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  
</description>
            <pubDate>Thu, 26 Oct 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mysql80-to-mysql80-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mysql80-to-mysql80-guide.html</guid>
            
            <category>database</category>
            
            <category>vpc</category>
            
            <category>MySQL</category>
            
            
        </item>
        
        <item>
            <title>Ncloud 데이터베이스 마이그레이션 서비스 | From MySQL 5.7 To MySQL 8.0</title>
            <description>## 개요
Ncloud(네이버 클라우드)의 Database Migration Service는 다양한 환경의 데이터베이스를 클라우드 환경으로 손쉽게 마이그레이션하도록 도와주는 서비스로 여기서는 **Public** 환경의 MySQL 5.7을 **Private** 환경의 [**Cloud DB for MySQL 8.0**]으로 마이그레이션하는 방법에 대해 정리해보겠습니다.

## 서비스에서 제공하는 기능
- **마이그레이션의 단계별 작업 자동화**: Migration 작업을 생성하여 마이그레이션에 필요한 단계별 작업 자동화
- **Endpoint 관리 기능**: 손쉽게 Source DB Endpoint 생성 및 관리 가능
- **연결 테스트 기능**: 마이그레이션 실행 전 Source DB와 Target DB 간 연결 테스트 진행
- **마이그레이션 작업 내역 모니터링**: 마이그레이션 작업 상태와 내역 조회 가능

## 지원 데이터베이스
Database Migration Service는 MySQL 데이터베이스 간 마이그레이션을 지원합니다.

- Major 버전이 동일한 데이터베이스 간의 마이그레이션이 권장됩니다.
- Source DB는 MariaDB도 가능합니다.
- Target DB는 MySQL만 가능합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-41.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 상세 설정 지원 여부
Source DB의 상세 설정에 따른 지원 여부는 다음과 같습니다.

### 지원 항목
- 데이터베이스, TABLE의 캐릭터셋(CharacterSet): euckr, utf8(utf8mb3), utf8mb4 지원
- Table, View, Stored Procedure, Function, Trigger 마이그레이션 지원

### 미지원 항목
- TABLE ENGINE: MyISAM, BLACKHOLE, FEDERATED, ARCHIVE 미지원
- 사용자 계정 정보, MySQL Config 항목, Event 마이그레이션 미지원

## 마이그레이션 진행 구조
마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근하여 DB 데이터를 가져오는 방식`**으로 진행됩니다.   

또한 작업 진행 단계는 다음과 같습니다.
1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 완료 상태
4. 마이그레이션 작업 완료

## 서비스 점검
마이그레이션 작업을 진행할 때 서비스 점검을 언제할 것인가가 중요한 고려사항이 됩니다. 물론 가장 안전한 방법은 마이그레이션 작업 전에 서비스 점검을 시작하는 것이지만, DB의 용량이 클 경우는 [**Export**], [**Import**] 각각 몇 시간씩 소요될 수 있는데, 오랜 시간 서비스 점검을 하려면 부담이 될 수 밖에 없습니다.  
그러므로 오랜 시간 동안 서비스 점검을 하기 어려울 경우 다음과 같이 진행하면 되겠습니다.  

마이그레이션에서 [**Export**], [**Import**] 작업이 끝나면 두 DB간의 **Replication** 상태가 유지되는데 이때는 [**Source DB**]에 새로운 데이터가 추가되면 자동으로 [**Target DB**]로 복제가 됩니다. 그러므로 두 DB 간의 **Replication**이 완료 상태에서 서비스 점검을 시작하고 최종 마이그레이션 작업이 완료된 후에 서비스 점검을 종료하면 됩니다. 

1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 상태
4. 서비스 점검 시작
5. 마이그레이션 작업 완료
6. 서비스 점검 종료

## 테스트 환경
Source DB는 Ncloud(네이버 클라우드) 외부에 위치한 경우가 많을 것으로 예상되므로 다음과 같은 사항들을 가정하고 테스트 환경을 준비해보겠습니다.

- **Source DB**와 **Target DB**가 사설 네트워크로 접근이 불가능한 **서로 다른 네트워크 환경**에 존재한다.
- **Source DB**는 외부에서 공인 IP로 접근 가능한 **Public 네트워크 환경**에 존재한다.
- **Target DB**는 외부에서 접근이 불가능한 **Private 네트워크 환경**에 존재한다.
- **Target DB**는 `NAT Gateway`를 통해서 **Source DB**에 접근한다.

### DB 버전 정보
- Source DB: CentOS 7.8, MySQL 5.7.43
- Target DB: Cloud DB for MySQL 8.0.32

{% tabs db-verstion %}

{% tab db-verstion Source DB %}

&amp;#8259; **Source DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-00.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab db-verstion Target DB %}

&amp;#8259; **Target DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-06.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

### Source DB 정보 확인
테스트에 사용할 Source DB의 버전, Database, DB User 등의 정보를 확인해보겠습니다.

{% tabs sourcedb-setting %}

{% tab sourcedb-setting MySQL 버전 %}

&amp;#8259; **MySQL 버전**  
테스트에 사용할 DB는 아래에서 확인할 수 있듯이 MySQL 5.7.43입니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-01.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Database %}

&amp;#8259; **Database**  
테스트를 위해 testdb1, testdb2 이렇게 2개의 DB를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting 계정 %}

&amp;#8259; **계정**  
테스트를 위한 abcd1, abcd2 이렇게 2개의 DB User를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Table %}

&amp;#8259; **Table**  
테스트용 Database에 sampletable1, sampletable2 이렇게 각각 테이블을 1개씩 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Procedure %}

&amp;#8259; **Procedure**  
테스트용 Database testdb2에 new_procedure2라는 이름의 Procedure를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

## Source DB 사전 설정

### 마이그레이션 전용 DB User 생성
마이그레이션을 위한 전용 유저 즉, Target DB에서 Source DB로 접속할 때 사용할 DB User를 아래와 같이 생성합니다.

- 패스워드는 최소 8자 이상, 최대 21 자까지만 입력이 가능합니다.  
영문 / 특수문자 / 숫자가 포함되어야 합니다.  
` &amp; + \ &quot; &apos; / 스페이스 는 패스워드로 사용할 수 없습니다.  
- 기본 시스템DB를 제외한 사용자가 추가로 생성한 모든 데이터베이스에 대해 권한을 부여합니다.

``` sql
CREATE USER &apos;migration_test&apos;@&apos;%&apos; IDENTIFIED WITH &apos;mysql_native_password&apos;  BY &apos;[패스워드]&apos;;
GRANT RELOAD, PROCESS, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT ON mysql.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT, SHOW VIEW, LOCK TABLES, TRIGGER ON [사용자 생성 DB].* TO &apos;migration_test&apos;@&apos;%&apos;;
FLUSH PRIVILEGES;
```

- 위쪽에서 Source DB에 테스용으로 [**testdb1**], [**testdb2**] 이렇게 2개를 데이터베이스가 존재하므로 두 개의 데이터베이스 각각에 대해 권한을 부여했습니다.
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Character Set 점검
Target DB로 생성되는 Cloud DB for MySQL은 [**utf8, utf8mb4, euckr**] Character Set만 지원합니다.  
Source DB에 이 외의 설정으로 되어 있다면 Character Set을 변경 후 마이그레이션을 진행해야 합니다.

- Character Set 점검 쿼리  

``` sql
SELECT character_set_name
FROM information_schema.TABLES T, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY CCSA
WHERE CCSA.collation_name = T.table_collation 
AND TABLE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND CCSA.character_set_name NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos; );

SELECT DEFAULT_CHARACTER_SET_NAME
FROM information_schema.SCHEMATA T
WHERE SCHEMA_NAME NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND DEFAULT_CHARACTER_SET_NAME NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos;);
```

- Character Set 변경 쿼리 예시 

``` sql
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8;
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8 COLLATE utf8_general_ci;
ALTER TABLE [테이블명] CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;
```

### sql_mode 설정 점검 {#sql_mode}
MySQL 5.7 버전에서 Default 값으로 지원하는 sql_mode=&apos;NO_AUTO_CREATE_USER&apos; 설정은 MySQL 8.0 버전부터는 지원하지 않기 때문에, Source DB에서 사용된 곳이 있으면 찾아서 해당 옵션을 제거해야 합니다.

#### sql_mode 설정 점검 쿼리
Procedure, Function 등의 ROUTINE과 TRIGGER에서 사용되므로 아래 쿼리로 [**NO_AUTO_CREATE_USER**] 옵션이 사용된 곳이 있는지 점검합니다.

``` sql
SELECT ROUTINE_SCHEMA, ROUTINE_NAME, SQL_MODE
FROM information_schema.routines
WHERE ROUTINE_SCHEMA NOT IN (&apos;sys&apos;,&apos;mysql&apos;);

SELECT TRIGGER_SCHEMA, TRIGGER_NAME, sql_mode
FROM information_schema.triggers
WHERE TRIGGER_SCHEMA NOT IN (&apos;sys&apos;,&apos;mysql&apos;);
```

- 테스트용 Source DB에서 점검 쿼리를 실행해보면 아래와 같이 [**testdb2**]의 [**new_procedure2**]에 [**NO_AUTO_CREATE_USER**] 옵션이 적용되어 있는 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-01.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### sql_mode 호환성 이슈 조치 방법
Procedure, Function, Trigger의 Dump 파일을 생성하고 [**NO_AUTO_CREATE_USER**] 옵션을 제거한 후 다시 적용하면 됩니다.

- Procedure, Function, Trigger 에 대해서만 drop 및 create 구문이 생성된 sql 파일 생성  

``` bash
~# mysqldump -u {사용자명} -p --set-gtid-purged=OFF --routines --triggers  --no-create-info --no-data --no-create-db --add-drop-trigger --databases {사용자 DB} &gt; backup.sql
```
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- backup.sql 파일내 NO_AUTO_CREATE_USER 구문 모두 제거  
해당 옵션을 일일이 찾아서 제거하기 힘드니 vim 에디터에서 [**NO_AUTO_CREATE_USER**] 문자를 찾아서 제거하는 명령을 실행합니다.  
경우에 따라서는 Dump 파일에 [**NO_AUTO_CREATE_USER**] 옵션이 포함되지 않는 경우도 있습니다. 이때는 걱정말고 Dump 파일을 그냥 그대로 적용하면 됩니다.

``` bash   
vim 명령: %s /NO_AUTO_CREATE_USER,//g

원본 예시: SET sql_mode = &apos;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;  
수정 예시: SET sql_mode = &apos;STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION&apos;
```
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- 적용하기  
수정된 Dump 파일을 Source DB에 적용합니다.

``` bash
~# mysql -u {사용자명} -p {사용자 DB} &lt; backup.sql
```
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### sql_mode 설정 변경 확인
설정이 제대로 변경되었는지 점검 쿼리로 다시 확인해보겠습니다.

``` sql
SELECT ROUTINE_SCHEMA, ROUTINE_NAME, SQL_MODE
FROM information_schema.routines
WHERE ROUTINE_SCHEMA NOT IN (&apos;sys&apos;,&apos;mysql&apos;);
```

- 아래 스샷처럼 [**NO_AUTO_CREATE_USER**] 옵션이 사라진 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


### 바이너리 로그 설정 {#log_bin}
Source DB의 바이너리 로그 설정 중에서, [**server_id**] 값이 설정되어 있는지와 [**log_bin**]이 ON 상태로 설정되어 있지 확인 후 설정되어 있지 않다면 설정 후에 진행해야 합니다.

#### 현재 설정 확인  
아래 쿼리를 사용해 현재 설정 값을 확인합니다.  

``` sql
show variables like &apos;server_id&apos;;
show variables like &apos;log_bin&apos;;
```

- 현재 테스트용 Source DB는 두 값이 모두 설정되어 있지 않은 상태입니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-11.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 설정 변경
MySQL의 환경 설정 파일 [**my.cnf**]를 열어서 아래 값을 추가하고, MySQL 데몬을 재시작합니다.
``` bash
~# vim /etc/my.cnf

server_id = 1
log_bin = binlog

~# systemctl restart mysqld
```

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-12.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-13.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 변경 설정 확인  
설정 변경 후에 확인해보면 아래와 같이 [**server_id**] 값이 설정되어 있고, [**log_bin**]이 ON 상태로 변경된 것을 알 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-14.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## Target DB 사전 설정
위에서 [Source DB]의 사전 설정이 끝났으므로 이제 [**Target DB**]의 사전 설정이 필요한 항목을 확인해보겠습니다.

### DEFINER 계정 확인 {#DEFINER}
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재한다면 이 때 사용된 DB User 즉, [**DEFINER**] 계정을 [**Target DB**]에도 미리 추가 생성해 두어야 마이그레이션을 진행할 수 있습니다.

아래 쿼리는 [**Procedure**], [**Function**], [**VIEW**] 등을 생성할 때 사용된 [**DEFINER**] 계정을 확인하는 쿼리입니다.  

``` sql
SELECT DEFINER FROM information_schema.ROUTINES
WHERE ROUTINE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos;;

SELECT DEFINER FROM information_schema.VIEWS
WHERE table_schema NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos; ;
```

- 위에서 [**Source DB**]에 테스트 환경을 설정하면서 [**Procedure**]를 하나 생성했었는데 그때 사용된 [**DEFINER**] 계정을 확인할 수 있었습니다. 여기서 확인된 DB User를 [**Target DB**]에 미리 추가 생성해 두어야 합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-22.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-top-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;위 단계에서 DEFINER User가 없는 것으로 확인될 경우 DEFINER User 추가 없이 다음 단계로 진행하셔도 됩니다.&quot; %}

### DEFINER 계정 추가
[**Target DB**]를 선택하고 [**DB 관리**] - [**DB User 관리**] 메뉴를 선택합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-06.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- DB User 관리 화면에서 위에서 확인했던 [**DEFINER**] 계정을 DDL 권한으로 설정해서 추가하고 저장합니다. 
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-24.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 접근 권한 설정 {#ACG}
[**Source DB**], [**Target DB**] 양쪽의 사전 설정을 모두 완료했으면, 다음으로는 양쪽 DB간의 접근 권한을 설정해야 합니다.  
앞에서도 설명했지만 마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하게 됩니다.

### NAT Gateway 생성
현재 [**Target DB**]는 [**Private**] 네트워크 환경에 위치해 있으므로 [**Source DB**]로 접근하기 위해서는 [**NAT Gateway**]를 생성해서 외부 통신이 가능하도록 해야 합니다.  
여기서는 [**NAT Gateway**]가 생성되어 있다고 가정하고, 어떻게 설정하는지 확인해보겠습니다.  

- [**NAT Gateway**] 상세 정보 중에서 [**공인 IP**]는 따로 기록해 두었다가, 아래쪽에서 [**방화벽(ACG) 설정**]에서 사용하게 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-15.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

VPC 환경에서 [**NAT Gateway**]를 생성하는 상세한 방법은 아래 문서를 참고하시면 됩니다.

{% include callout-v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; &lt;a href=&apos;/networking/ncloud_networking_natgw_routetb.html&apos; target=&apos;_blank&apos; style=&apos;word-break:break-all;&apos;&gt;VPC 환경에서 NAT Gateway 생성하는 방법&lt;/a&gt;
&quot; %}

### Route Table 설정
다음으로 [**VPC**] - [**Route Table**]에서 [**Target DB**]의 Subnet에 연관된 [**Route Table**]을 선택하고, [**Routes 설정**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-16.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- **Route Table 설정** 화면에서 [**Destination**]에는 [**Source DB**]의 공인 IP를 입력하고, [**Target Type**]은 [**NATGW**], [**Target Name**]은 위에서 생성했던 **NAT Gateway**를 선택하고 [**생성**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-17.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 방화벽(ACG) 설정
**`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하여 DB 데이터를 가져오기 위해 [**Target DB**] 방화벽에서는 [**Outbound**] 규칙을,  [**Source DB**] 방화벽에서는 [**Inbound**] 규칙을 설정해야 합니다.

#### Target DB ACG 설정
우선 [**Target DB**]의 [**Outbound**] 규칙을 설정해보겠습니다. [**Target DB**]를 선택하면 나타나는 DB 상세 정보 화면에서 [**ACG**]를 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG**] 화면에서 해당 ACG를 선택하고 [**ACG 설정**] 메뉴를 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG 규칙 설정**] 팝업에서 [**Outbound**] 탭을 선택하고, [**목적지**]에는 [**Source DB**]의 IP 주소, [**허용 포트**]에는 [**Source DB**]의 포트 번호를 입력한 후 [**추가**]-[**적용**] 버튼을 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


#### Source DB 방화벽 설정
이제 [**Source DB**] 방화벽에 위에서 확인했던 [**NAT Gateway**]의 [**공인 IP**]를 추가해서 [**Taget DB**]가 접근할 수 있도록 설정하겠습니다.

- On Premise 등 Ncloud 외부 서버의 경우 자체 방화벽에 직접 추가하시면 됩니다.  

- Ncloud 내부 서버의 경우 해당 서버의 ACG의 [**Inbound**] 설정에 아래처럼 추가하면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-18.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 서비스 위치
이제 모든 준비를 마쳤으면 본격적으로 마이그레이션 작업을 진행해보겠습니다.  
[**Database Migration**] 서비스는 [**Services**] - [**Database**] - [**Database Migration**]에 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-19.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 설정
[**Source DB**]와 [**Target DB**]에서 사전 준비가 끝났으면 이제 [**Database Migration Service**] 설정을 시작합니다.

### Endpoint 설정 {#Endpoint}
우선 [**Database Migration Service**] - [**Endpoint Management**] 메뉴에서 [**Endpoint 생성**] 버튼을 클릭합니다.  
여기서 [**Endpoint**]는 [**Source DB**]를 지칭하는 것으로 [**Source DB**]의 정보를 입력한다고 생각하시면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-20.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

다음으로 Endpoint 생성화면에서 [**Source DB**] 관련 정보를 입력하고 [**생성**] 버튼을 클릭합니다.
- **Endpoint URL**: **Source DB의 IP 또는 도메인**을 입력합니다.
- **DB PORT**: Source DB의 Port를 입력합니다.
- **DB User**: 위에서 Source DB에 생성했던 **마이그레이션 전용 DB User**를 입력합니다.
- **DB Password**: 마이그레이션 전용 DB User의 패스워드를 입력합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-21.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 작업 생성
[**Database Migration Service**] - [**Migration Management**] 메뉴에서 [**Migration 작업생성**] 버튼을 클릭합니다. 

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-25.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Test Connection
[**Source DB**] 항목과 [**Target DB**] 항목을 선택한 후에 [**Test Connection**] 버튼을 클릭해 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**을 테스트 해봅니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-26.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 시작
[**Test Connection**]에서 이상이 없을 경우 아래와 같이 옮겨오게 될 [**Source DB**]의 정보를 확인할 수 있습니다. 문제가 없으면 [**Migration 작업시작**] 버튼을 클릭해서 마이그레이션 작업을 시작합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-27.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 진행 상태
마이그레이션 작업은 [**Exporting**], [**Importing**], [**Replication**] 이렇게 3가지 단계로 진행되는데, 각각의 진행 상태를 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-08.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-09.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 진행 상태 확인 메일
진행 상태는 콘솔에서도 확인할 수 있지만, 작업이 오래 걸리는 경우도 대비해서 각 단계가 완료될 때마다 안내 메일이 발송됩니다.

{% tabs migration-status %}

{% tab migration-status Export Completed %}

&amp;#8259; **Export Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-30.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Import Completed %}

&amp;#8259; **Import Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-31.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Migration Completed %}

&amp;#8259; **Migration Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-32.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;
이 단계까지 완료되면 현재 상태는 **Source DB**와 **Target DB**간의 **Replication**이 완료된 상태이므로 이때 서비스 점검을 시작하고 아래쪽의 마이그레이션 **완료** 버튼을 클릭해서 최종 완료를 확인한 후에 서비스 점검을 종료하면 되겠습니다. 
&quot; %}

## 마이그레이션 완료
마이그레이션 작업이 완료되면 아래와 같이 콘솔화면에서 [**완료**] 버튼이 활성화 됩니다. 즉, 현재는 [**Replication**] 작업이 완료된 상태로 [**Source DB**]와 [**Target DB**]가 동기화 되어 있고, [**Target DB**]는 [**쓰기 불가**] 상태입니다.  

그러므로 [**완료**] 버튼 클릭해야 모든 작업이 완료되고, [**Target DB**]가 [**쓰기 가능**] 상태로 변경됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-10.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**완료**] 버튼 클릭하면 아래와 같이 안내 메시지가 출력되고 [**확인**] 버튼을 클릭하면 완료됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-34.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 최종 완료
최종 완료가 되면 아래와 같이 [**Migration Status**] 상태가 **완료**상태로 변경되고 [**Migration 종료 일시**]로 기록됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-11.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## Target DB 데이터 확인
마이그레이션이 모두 완료되었으므로 [**Source DB**]의 데이터가 [**Target DB**]로 모두 이상 없이 마이그레이션 되었는지 [**Target DB**]에 접속해서 직접 확인해보겠습니다.  
확인해보는 방법은 [**Target DB**]와 동일한 [**Subnet**]에 테스터 서버를 생성하고,  [**Target DB**]에 접속해서 [**Database**], [**Table**], [**Procedure**] 등이 정상적으로 존재하는지 살펴보는 것인데, 아래 스샷처럼 모두 이상이 없는 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-40.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## 오류 상황
지금부터는 마이그레이션 진행 중에 나타날 수 있는 오류 메시지 관련해서 정리해보고, 해결 방법을 알아보겠습니다.

### 방화벽 설정 오류  
[**Source DB**]의 방화벽 Inbound 설정과 [**Target DB**]의 ACG Outbound 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [접근 권한 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#ACG) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 와 Target DB 서버 통신이 되지 않습니다. &lt;br/&gt;Source DB Inbound 와 Target DB Outbound ACG 를 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-36.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Endpoint DB User 설정 오류  
[**Endpoint 설정**]에서 [**DB User**] 또는 [**DB Password**] 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [Endpoint 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#Endpoint) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 에 접속이 되지 않습니다.&lt;br /&gt;DB ACL 을 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-37.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### DEFINER 계정 생성 오류
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재하고, 이때 사용된 DB User 즉, [**DEFINER**] 계정이 [**Target DB**]에 존재하지 않았을 경우 나타나는 메시지 입니다. [DEFINER 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#DEFINER) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB에 생성된 Definer 계정이 Target DB 에 존재하지 않습니다.&lt;br /&gt;Definer 에 사용된 계정은 먼저 생성후 진행해 주세요.&lt;br /&gt;필요 Definer 계정 : abcd2@%&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-38.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


### 바이너리 로그 설정 오류
Source DB의 바이너리 로그 설정 중에서, [server_id], [log_bin] 관련 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [바이너리 로그 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#log_bin) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;마이그레이션을 위해서는 Source DB Config 설정이 필요합니다.&lt;br /&gt;추가 필요 설정 : log_bin&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-39.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


### sql_mode 설정 오류
[**Source DB**] 사전 설정에서 sql_mode 관련된 설정을 수정하지 않았을 경우 아래와 같이 마이그레이션 진행 중에 [**Importing**] 단계에서 실패가 발생하고 [**에러 보기**] 버튼을 클릭하면 아래와 같은 메시지가 나타납니다. [sql_mode 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#sql_mode) 내용을 다시 확인해주세요.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-12.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;ERROR 1234 (42000) at line 98: Variable &apos;sql_mode&apos; can&apos;t be set to the value of &apos;NO_AUTO_CREATE_USER&apos;&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-13.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 마이그레이션 재실행
위와 같이 [**sql_mode**] 관련 오류로 마이그레이션 작업이 실패했을 경우에는 [**재시작**] 버튼으로 재시작을 할 경우에는 동일한 오류가 계속 발생하게 됩니다.   
이때는 [**sql_mode**] 설정을 수정한 후에 마이그레이션 작업을 삭제하고, [**Target DB**]에 생성된 [**Database**]을 모두 삭제 후에 마이그레이션 작업을 다시 생성해야 정상 작동합니다.

- [**sql_mode**] 설정을 수정한 후에 [**삭제**] 버튼을 클릭해서 마이그레이션 작업을 삭제합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-14.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**Target DB**]의 [**DB 관리**] - [**DB Server 상세보기**] 메뉴를 클릭해서 [**Database 관리**] 기능으로 이동합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-16.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**Database 관리**]에서 [**Source DB**]에서 Import한 [**Database**]을 모두 삭제하고, [**저장**] 버튼을 클릭합니다.  
그런 후에 마이그레이션 작업을 다시 생성해야 정상 작동합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql80-guide-15.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 Cloud DB for MySQL 8.0으로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 참고 URL
1. Database Migration Service 개요
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/ko/dms-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/ko/dms-overview&lt;/a&gt;

2. Source DB 및 Target DB 접속 설정
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/dms-connect&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/dms-connect&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  
</description>
            <pubDate>Tue, 24 Oct 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mysql57-to-mysql80-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mysql57-to-mysql80-guide.html</guid>
            
            <category>database</category>
            
            <category>vpc</category>
            
            <category>MySQL</category>
            
            
        </item>
        
        <item>
            <title>Ncloud 데이터베이스 마이그레이션 서비스 | From MySQL 5.7 To MySQL 5.7</title>
            <description>## 개요
Ncloud(네이버 클라우드)의 Database Migration Service는 다양한 환경의 데이터베이스를 클라우드 환경으로 손쉽게 마이그레이션하도록 도와주는 서비스로 여기서는 **Public** 환경의 MySQL 5.7을 **Private** 환경의 [**Cloud DB for MySQL 5.7**]로 마이그레이션하는 방법에 대해 정리해보겠습니다.

## 서비스에서 제공하는 기능
- **마이그레이션의 단계별 작업 자동화**: Migration 작업을 생성하여 마이그레이션에 필요한 단계별 작업 자동화
- **Endpoint 관리 기능**: 손쉽게 Source DB Endpoint 생성 및 관리 가능
- **연결 테스트 기능**: 마이그레이션 실행 전 Source DB와 Target DB 간 연결 테스트 진행
- **마이그레이션 작업 내역 모니터링**: 마이그레이션 작업 상태와 내역 조회 가능

## 지원 데이터베이스
Database Migration Service는 MySQL 데이터베이스 간 마이그레이션을 지원합니다.

- Major 버전이 동일한 데이터베이스 간의 마이그레이션이 권장됩니다.
- Source DB는 MariaDB도 가능합니다.
- Target DB는 MySQL만 가능합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-41.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 상세 설정 지원 여부
Source DB의 상세 설정에 따른 지원 여부는 다음과 같습니다.

### 지원 항목
- 데이터베이스, TABLE의 캐릭터셋(CharacterSet): euckr, utf8(utf8mb3), utf8mb4 지원
- Table, View, Stored Procedure, Function, Trigger 마이그레이션 지원

### 미지원 항목
- TABLE ENGINE: MyISAM, BLACKHOLE, FEDERATED, ARCHIVE 미지원
- 사용자 계정 정보, MySQL Config 항목, Event 마이그레이션 미지원

## 마이그레이션 진행 구조
마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근하여 DB 데이터를 가져오는 방식`**으로 진행됩니다.   

또한 작업 진행 단계는 다음과 같습니다.
1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 완료 상태
4. 마이그레이션 작업 완료

## 서비스 점검
마이그레이션 작업을 진행할 때 서비스 점검을 언제할 것인가가 중요한 고려사항이 됩니다. 물론 가장 안전한 방법은 마이그레이션 작업 전에 서비스 점검을 시작하는 것이지만, DB의 용량이 클 경우는 [**Export**], [**Import**] 각각 몇 시간씩 소요될 수 있는데, 오랜 시간 서비스 점검을 하려면 부담이 될 수 밖에 없습니다.  
그러므로 오랜 시간 동안 서비스 점검을 하기 어려울 경우 다음과 같이 진행하면 되겠습니다.  

마이그레이션에서 [**Export**], [**Import**] 작업이 끝나면 두 DB간의 **Replication** 상태가 유지되는데 이때는 [**Source DB**]에 새로운 데이터가 추가되면 자동으로 [**Target DB**]로 복제가 됩니다. 그러므로 두 DB 간의 **Replication**이 완료 상태에서 서비스 점검을 시작하고 최종 마이그레이션 작업이 완료된 후에 서비스 점검을 종료하면 됩니다. 

1. [**Source DB**]에서 [**Export**]
2. [**Target DB**]로 [**Import**]
3. 두 DB 간의 **Replication** 상태
4. 서비스 점검 시작
5. 마이그레이션 작업 완료
6. 서비스 점검 종료

## 테스트 환경
Source DB는 Ncloud(네이버 클라우드) 외부에 위치한 경우가 많을 것으로 예상되므로 다음과 같은 사항들을 가정하고 테스트 환경을 준비해보겠습니다.

- **Source DB**와 **Target DB**가 사설 네트워크로 접근이 불가능한 **서로 다른 네트워크 환경**에 존재한다.
- **Source DB**는 외부에서 공인 IP로 접근 가능한 **Public 네트워크 환경**에 존재한다.
- **Target DB**는 외부에서 접근이 불가능한 **Private 네트워크 환경**에 존재한다.
- **Target DB**는 `NAT Gateway`를 통해서 **Source DB**에 접근한다.

### DB 버전 정보
- Source DB: CentOS 7.8, MySQL 5.7.43
- Target DB: Cloud DB for MySQL 5.7.40

{% tabs db-verstion %}

{% tab db-verstion Source DB %}

&amp;#8259; **Source DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-00.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab db-verstion Target DB %}

&amp;#8259; **Target DB**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-06.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

### Source DB 정보 확인
테스트에 사용할 Source DB의 버전, Database, DB User 등의 정보를 확인해보겠습니다.

{% tabs sourcedb-setting %}

{% tab sourcedb-setting MySQL 버전 %}

&amp;#8259; **MySQL 버전**  
테스트에 사용할 DB는 아래에서 확인할 수 있듯이 MySQL 5.7.43입니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-01.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Database %}

&amp;#8259; **Database**  
테스트를 위해 testdb1, testdb2 이렇게 2개의 DB를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-02.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting 계정 %}

&amp;#8259; **계정**  
테스트를 위한 abcd1, abcd2 이렇게 2개의 DB User를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-03.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Table %}

&amp;#8259; **Table**  
테스트용 Database에 sampletable1, sampletable2 이렇게 각각 테이블을 1개씩 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-04.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab sourcedb-setting Procedure %}

&amp;#8259; **Procedure**  
테스트용 Database testdb2에 new_procedure2라는 이름의 Procedure를 생성했습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-05.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

## Source DB 사전 설정

### 마이그레이션 전용 DB User 생성
마이그레이션을 위한 전용 유저 즉, Target DB에서 Source DB로 접속할 때 사용할 DB User를 아래와 같이 생성합니다.

- 패스워드는 최소 8자 이상, 최대 21 자까지만 입력이 가능합니다.  
영문 / 특수문자 / 숫자가 포함되어야 합니다.  
` &amp; + \ &quot; &apos; / 스페이스 는 패스워드로 사용할 수 없습니다.  
- 기본 시스템DB를 제외한 사용자가 추가로 생성한 모든 데이터베이스에 대해 권한을 부여합니다.

``` sql
CREATE USER &apos;migration_test&apos;@&apos;%&apos; IDENTIFIED WITH &apos;mysql_native_password&apos;  BY &apos;[패스워드]&apos;;
GRANT RELOAD, PROCESS, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT ON mysql.* TO &apos;migration_test&apos;@&apos;%&apos;;
GRANT SELECT, SHOW VIEW, LOCK TABLES, TRIGGER ON [사용자 생성 DB].* TO &apos;migration_test&apos;@&apos;%&apos;;
FLUSH PRIVILEGES;
```

- 위쪽에서 Source DB에 테스용으로 [**testdb1**], [**testdb2**] 이렇게 2개를 데이터베이스가 존재하므로 두 개의 데이터베이스 각각에 대해 권한을 부여했습니다.
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-10.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Character Set 점검
Target DB로 생성되는 Cloud DB for MySQL은 [**utf8, utf8mb4, euckr**] Character Set만 지원합니다.  
Source DB에 이 외의 설정으로 되어 있다면 Character Set을 변경 후 마이그레이션을 진행해야 합니다.

- Character Set 점검 쿼리  

``` sql
SELECT character_set_name
FROM information_schema.TABLES T, information_schema.COLLATION_CHARACTER_SET_APPLICABILITY CCSA
WHERE CCSA.collation_name = T.table_collation 
AND TABLE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND CCSA.character_set_name NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos; );

SELECT DEFAULT_CHARACTER_SET_NAME
FROM information_schema.SCHEMATA T
WHERE SCHEMA_NAME NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) 
AND DEFAULT_CHARACTER_SET_NAME NOT IN ( &apos;utf8&apos;, &apos;utf8mb4&apos;, &apos;euckr&apos;);
```

- Character Set 변경 쿼리 예시 

``` sql
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8;
ALTER DATABASE [데이터베이스명] CHARACTER SET utf8 COLLATE utf8_general_ci;
ALTER TABLE [테이블명] CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;
```

### 바이너리 로그 설정 {#log_bin}
Source DB의 바이너리 로그 설정 중에서, [**server_id**] 값이 설정되어 있는지와 [**log_bin**]이 ON 상태로 설정되어 있지 확인 후 설정되어 있지 않다면 설정 후에 진행해야 합니다.

#### 현재 설정 확인  
아래 쿼리를 사용해 현재 설정 값을 확인합니다.  

``` sql
show variables like &apos;server_id&apos;;
show variables like &apos;log_bin&apos;;
```

- 현재 테스트용 Source DB는 두 값이 모두 설정되어 있지 않은 상태입니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-11.png&quot; width=&quot;840&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 설정 변경
MySQL의 환경 설정 파일 [**my.cnf**]를 열어서 아래 값을 추가하고, MySQL 데몬을 재시작합니다.
``` bash
~# vim /etc/my.cnf

server_id = 1
log_bin = binlog

~# systemctl restart mysqld
```

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-12.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-13.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 변경 설정 확인  
설정 변경 후에 확인해보면 아래와 같이 [**server_id**] 값이 설정되어 있고, [**log_bin**]이 ON 상태로 변경된 것을 알 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-14.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-top&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## Target DB 사전 설정
위에서 [Source DB]의 사전 설정이 끝났으므로 이제 [**Target DB**]의 사전 설정이 필요한 항목을 확인해보겠습니다.

### DEFINER 계정 확인 {#DEFINER}
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재한다면 이 때 사용된 DB User 즉, [**DEFINER**] 계정을 [**Target DB**]에도 미리 추가 생성해 두어야 마이그레이션을 진행할 수 있습니다.

아래 쿼리는 [**Procedure**], [**Function**], [**VIEW**] 등을 생성할 때 사용된 [**DEFINER**] 계정을 확인하는 쿼리입니다.  

``` sql
SELECT DEFINER FROM information_schema.ROUTINES
WHERE ROUTINE_SCHEMA NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos;;

SELECT DEFINER FROM information_schema.VIEWS
WHERE table_schema NOT IN ( &apos;information_schema&apos;, &apos;mysql&apos;, &apos;performance_schema&apos;, &apos;sys&apos; ) AND SECURITY_TYPE = &apos;DEFINER&apos; ;
```

- 위에서 [**Source DB**]에 테스트 환경을 설정하면서 [**Procedure**]를 하나 생성했었는데 그때 사용된 [**DEFINER**] 계정을 확인할 수 있었습니다. 여기서 확인된 DB User를 [**Target DB**]에 미리 추가 생성해 두어야 합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-22.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-top-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;3&quot; content=&quot;위 단계에서 DEFINER User가 없는 것으로 확인될 경우 DEFINER User 추가 없이 다음 단계로 진행하셔도 됩니다.&quot; %}

### DEFINER 계정 추가
[**Target DB**]를 선택하고 [**DB 관리**] - [**DB User 관리**] 메뉴를 선택합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-23.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- DB User 관리 화면에서 위에서 확인했던 [**DEFINER**] 계정을 DDL 권한으로 설정해서 추가하고 저장합니다. 
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-24.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 접근 권한 설정 {#ACG}
[**Source DB**], [**Target DB**] 양쪽의 사전 설정을 모두 완료했으면, 다음으로는 양쪽 DB간의 접근 권한을 설정해야 합니다.  
앞에서도 설명했지만 마이그레이션은 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하게 됩니다.

### NAT Gateway 생성
현재 [**Target DB**]는 [**Private**] 네트워크 환경에 위치해 있으므로 [**Source DB**]로 접근하기 위해서는 [**NAT Gateway**]를 생성해서 외부 통신이 가능하도록 해야 합니다.  
여기서는 [**NAT Gateway**]가 생성되어 있다고 가정하고, 어떻게 설정하는지 확인해보겠습니다.  

- [**NAT Gateway**] 상세 정보 중에서 [**공인 IP**]는 따로 기록해 두었다가, 아래쪽에서 [**방화벽(ACG) 설정**]에서 사용하게 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-15.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

VPC 환경에서 [**NAT Gateway**]를 생성하는 상세한 방법은 아래 문서를 참고하시면 됩니다.

{% include callout-v2.html type=&quot;info&quot; level=&quot;2&quot; content=&quot;
&amp;#8259; &lt;a href=&apos;/networking/ncloud_networking_natgw_routetb.html&apos; target=&apos;_blank&apos; style=&apos;word-break:break-all;&apos;&gt;VPC 환경에서 NAT Gateway 생성하는 방법&lt;/a&gt;
&quot; %}

### Route Table 설정
다음으로 [**VPC**] - [**Route Table**]에서 [**Target DB**]의 Subnet에 연관된 [**Route Table**]을 선택하고, [**Routes 설정**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-16.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- **Route Table 설정** 화면에서 [**Destination**]에는 [**Source DB**]의 공인 IP를 입력하고, [**Target Type**]은 [**NATGW**], [**Target Name**]은 위에서 생성했던 **NAT Gateway**를 선택하고 [**생성**] 버튼을 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-17.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 방화벽(ACG) 설정
**`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**하여 DB 데이터를 가져오기 위해 [**Target DB**] 방화벽에서는 [**Outbound**] 규칙을,  [**Source DB**] 방화벽에서는 [**Inbound**] 규칙을 설정해야 합니다.

#### Target DB ACG 설정
우선 [**Target DB**]의 [**Outbound**] 규칙을 설정해보겠습니다. [**Target DB**]를 선택하면 나타나는 DB 상세 정보 화면에서 [**ACG**]를 클릭합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-07.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG**] 화면에서 해당 ACG를 선택하고 [**ACG 설정**] 메뉴를 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-08.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**ACG 규칙 설정**] 팝업에서 [**Outbound**] 탭을 선택하고, [**목적지**]에는 [**Source DB**]의 IP 주소, [**허용 포트**]에는 [**Source DB**]의 포트 번호를 입력한 후 [**추가**]-[**적용**] 버튼을 클릭합니다.  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-09.png&quot; width=&quot;845&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


#### Source DB 방화벽 설정
이제 [**Source DB**] 방화벽에 위에서 확인했던 [**NAT Gateway**]의 [**공인 IP**]를 추가해서 [**Taget DB**]가 접근할 수 있도록 설정하겠습니다.

- On Premise 등 Ncloud 외부 서버의 경우 자체 방화벽에 직접 추가하시면 됩니다.  

- Ncloud 내부 서버의 경우 해당 서버의 ACG의 [**Inbound**] 설정에 아래처럼 추가하면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-18.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 서비스 위치
이제 모든 준비를 마쳤으면 본격적으로 마이그레이션 작업을 진행해보겠습니다.  
[**Database Migration**] 서비스는 [**Services**] - [**Database**] - [**Database Migration**]에 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-19.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 설정
[**Source DB**]와 [**Target DB**]에서 사전 준비가 끝났으면 이제 [**Database Migration Service**] 설정을 시작합니다.

### Endpoint 설정 {#Endpoint}
우선 [**Database Migration Service**] - [**Endpoint Management**] 메뉴에서 [**Endpoint 생성**] 버튼을 클릭합니다.  
여기서 [**Endpoint**]는 [**Source DB**]를 지칭하는 것으로 [**Source DB**]의 정보를 입력한다고 생각하시면 됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-20.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

다음으로 Endpoint 생성화면에서 [**Source DB**] 관련 정보를 입력하고 [**생성**] 버튼을 클릭합니다.
- **Endpoint URL**: **Source DB의 IP 또는 도메인**을 입력합니다.
- **DB PORT**: Source DB의 Port를 입력합니다.
- **DB User**: 위에서 Source DB에 생성했던 **마이그레이션 전용 DB User**를 입력합니다.
- **DB Password**: 마이그레이션 전용 DB User의 패스워드를 입력합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-21.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

## 마이그레이션 작업 생성
[**Database Migration Service**] - [**Migration Management**] 메뉴에서 [**Migration 작업생성**] 버튼을 클릭합니다. 

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-25.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Test Connection
[**Source DB**] 항목과 [**Target DB**] 항목을 선택한 후에 [**Test Connection**] 버튼을 클릭해 **`Target DB`**&lt;i class=&quot;fa-solid fa-right-long&quot; style=&quot;color: #e43b11;&quot;&gt;&lt;/i&gt; **`Source DB로 접근`**을 테스트 해봅니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-26.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 시작
[**Test Connection**]에서 이상이 없을 경우 아래와 같이 옮겨오게 될 [**Source DB**]의 정보를 확인할 수 있습니다. 문제가 없으면 [**Migration 작업시작**] 버튼을 클릭해서 마이그레이션 작업을 시작합니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-27.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 마이그레이션 작업 진행 상태
마이그레이션 작업은 [**Exporting**], [**Importing**], [**Replication**] 이렇게 3가지 단계로 진행되는데, 각각의 진행 상태를 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-28.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-29.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

#### 진행 상태 확인 메일
진행 상태는 콘솔에서도 확인할 수 있지만, 작업이 오래 걸리는 경우도 대비해서 각 단계가 완료될 때마다 안내 메일이 발송됩니다.

{% tabs migration-status %}

{% tab migration-status Export Completed %}

&amp;#8259; **Export Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-30.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Import Completed %}

&amp;#8259; **Import Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-31.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% tab migration-status Migration Completed %}

&amp;#8259; **Migration Completed**  
{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-32.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

{% endtab %}

{% endtabs %}

{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;
이 단계까지 완료되면 현재 상태는 **Source DB**와 **Target DB**간의 **Replication**이 완료된 상태이므로 이때 서비스 점검을 시작하고 아래쪽의 마이그레이션 **완료** 버튼을 클릭해서 최종 완료를 확인한 후에 서비스 점검을 종료하면 되겠습니다. 
&quot; %}

## 마이그레이션 완료
마이그레이션 작업이 완료되면 아래와 같이 콘솔화면에서 [**완료**] 버튼이 활성화 됩니다. 즉, 현재는 [**Replication**] 작업이 완료된 상태로 [**Source DB**]와 [**Target DB**]가 복제 동기화 되어 있고, [**Target DB**]는 [**쓰기 불가**] 상태입니다.  

그러므로 [**완료**] 버튼 클릭해야 모든 작업이 완료되고, [**Target DB**]가 [**쓰기 가능**] 상태로 변경됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-33.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

- [**완료**] 버튼 클릭하면 아래와 같이 안내 메시지가 출력되고 [**확인**] 버튼을 클릭하면 완료됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-34.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### 최종 완료
최종 완료가 되면 아래와 같이 [**Migration Status**] 상태가 **완료**상태로 변경되고 [**Migration 종료 일시**]로 기록됩니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-35.png&quot; width=&quot;845&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## Target DB 데이터 확인
마이그레이션이 모두 완료되었으므로 [**Source DB**]의 데이터가 [**Target DB**]로 모두 이상 없이 마이그레이션 되었는지 [**Target DB**]에 접속해서 직접 확인해보겠습니다.  
확인해보는 방법은 [**Target DB**]와 동일한 [**Subnet**]에 테스터 서버를 생성하고,  [**Target DB**]에 접속해서 [**Database**], [**Table**], [**Procedure**] 등이 정상적으로 존재하는지 살펴보는 것인데, 아래 스샷처럼 모두 이상이 없는 것을 확인할 수 있습니다.

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-40.png&quot; width=&quot;840&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


## 오류 상황
지금부터는 마이그레이션 진행 중에 나타날 수 있는 오류 메시지 관련해서 정리해보고, 해결 방법을 알아보겠습니다.

### 방화벽 설정 오류  
[**Source DB**]의 방화벽 Inbound 설정과 [**Target DB**]의 ACG Outbound 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [접근 권한 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#ACG) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 와 Target DB 서버 통신이 되지 않습니다. &lt;br/&gt;Source DB Inbound 와 Target DB Outbound ACG 를 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-36.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### Endpoint DB User 설정 오류  
[**Endpoint 설정**]에서 [**DB User**] 또는 [**DB Password**] 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [Endpoint 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#Endpoint) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB 에 접속이 되지 않습니다.&lt;br /&gt;DB ACL 을 점검해 주세요.&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-37.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}

### DEFINER 계정 생성 오류
[**Source DB**]에 [**Procedure**], [**Function**], [**VIEW**] 등이 존재하고, 이때 사용된 DB User 즉, [**DEFINER**] 계정이 [**Target DB**]에 존재하지 않았을 경우 나타나는 메시지 입니다. [DEFINER 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#DEFINER) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;Source DB에 생성된 Definer 계정이 Target DB 에 존재하지 않습니다.&lt;br /&gt;Definer 에 사용된 계정은 먼저 생성후 진행해 주세요.&lt;br /&gt;필요 Definer 계정 : abcd2@%&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-38.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}


### 바이너리 로그 설정 오류
Source DB의 바이너리 로그 설정 중에서, [server_id], [log_bin] 관련 설정이 올바르지 않을 경우 나타나는 메시지 입니다. [바이너리 로그 설정 &lt;i class=&quot;fa-solid fa-arrow-up-from-bracket&quot;&gt;&lt;/i&gt;](#log_bin) 내용을 다시 확인해주세요.
{% include callout-v2.html type=&quot;warning&quot; level=&quot;2&quot; content=&quot;마이그레이션을 위해서는 Source DB Config 설정이 필요합니다.&lt;br /&gt;추가 필요 설정 : log_bin&quot;%}

{% include image.html file=&quot;database/migration/ncloud-database-db-migration-from-mysql57-to-mysql57-guide-39.png&quot; width=&quot;485&quot; sub-class=&quot;docimage-no-bottom&quot; alt=&quot;Ncloud(네이버 클라우드) Database Migration 서비스를 이용해 MySQL 5.7에서 클라우드 환경 MySQL 5.7로 마이그레이션하는 방법&quot; caption=&quot;&quot; %}



## 참고 URL
1. Database Migration Service 개요
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/ko/dms-overview&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/ko/dms-overview&lt;/a&gt;

2. Source DB 및 Target DB 접속 설정
	- &lt;a href=&quot;https://guide.ncloud-docs.com/docs/dms-connect&quot; target=&quot;_blank&quot; style=&quot;word-break:break-all;&quot;&gt;https://guide.ncloud-docs.com/docs/dms-connect&lt;/a&gt;


## 문서 업데이트 내역
{% include doc-history.html width=&quot;50%&quot; %}  
</description>
            <pubDate>Mon, 23 Oct 2023 00:00:00 +0900</pubDate>
            <link>https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mysql57-to-mysql57-guide.html</link>
            <guid isPermaLink="true">https://docs.3rdeyesys.com/database/ncloud-database-db-migration-from-mysql57-to-mysql57-guide.html</guid>
            
            <category>database</category>
            
            <category>vpc</category>
            
            <category>MySQL</category>
            
            
        </item>
        
    </channel>
</rss>
